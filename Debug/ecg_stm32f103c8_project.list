
ecg_stm32f103c8_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e78  08005e78  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005e78  08005e78  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e78  08005e78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000078  08005ef8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005ef8  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120e3  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a71  00000000  00000000  00032184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00034bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00035ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018efe  00000000  00000000  00036cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124c9  00000000  00000000  0004fbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091024  00000000  00000000  0006207f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f30a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  000f30f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800548c 	.word	0x0800548c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800548c 	.word	0x0800548c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <ILI9341_DrawFilledRectangleCoord>:
		ILI9341_DrawPixel(X1, Y1, color);
	}
}

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af02      	add	r7, sp, #8
 800064e:	4604      	mov	r4, r0
 8000650:	4608      	mov	r0, r1
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	4623      	mov	r3, r4
 8000658:	80fb      	strh	r3, [r7, #6]
 800065a:	4603      	mov	r3, r0
 800065c:	80bb      	strh	r3, [r7, #4]
 800065e:	460b      	mov	r3, r1
 8000660:	807b      	strh	r3, [r7, #2]
 8000662:	4613      	mov	r3, r2
 8000664:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8000682:	887a      	ldrh	r2, [r7, #2]
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	da01      	bge.n	8000694 <ILI9341_DrawFilledRectangleCoord+0x4c>
 8000690:	2301      	movs	r3, #1
 8000692:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8000698:	883a      	ldrh	r2, [r7, #0]
 800069a:	88bb      	ldrh	r3, [r7, #4]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da01      	bge.n	80006aa <ILI9341_DrawFilledRectangleCoord+0x62>
 80006a6:	2301      	movs	r3, #1
 80006a8:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 80006aa:	7cfb      	ldrb	r3, [r7, #19]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d106      	bne.n	80006be <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	823b      	strh	r3, [r7, #16]
 80006bc:	e005      	b.n	80006ca <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 80006c6:	887b      	ldrh	r3, [r7, #2]
 80006c8:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 80006ca:	7cbb      	ldrb	r3, [r7, #18]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d106      	bne.n	80006de <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 80006d0:	883a      	ldrh	r2, [r7, #0]
 80006d2:	88bb      	ldrh	r3, [r7, #4]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	81fb      	strh	r3, [r7, #14]
 80006dc:	e005      	b.n	80006ea <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 80006de:	88ba      	ldrh	r2, [r7, #4]
 80006e0:	883b      	ldrh	r3, [r7, #0]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 80006e6:	883b      	ldrh	r3, [r7, #0]
 80006e8:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 80006ea:	8abc      	ldrh	r4, [r7, #20]
 80006ec:	8afa      	ldrh	r2, [r7, #22]
 80006ee:	89f9      	ldrh	r1, [r7, #14]
 80006f0:	8a38      	ldrh	r0, [r7, #16]
 80006f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	4623      	mov	r3, r4
 80006f8:	f000 fd22 	bl	8001140 <ILI9341_DrawRectangle>
}
 80006fc:	bf00      	nop
 80006fe:	371c      	adds	r7, #28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b08d      	sub	sp, #52	; 0x34
 8000708:	af02      	add	r7, sp, #8
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	4611      	mov	r1, r2
 800070e:	461a      	mov	r2, r3
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	460b      	mov	r3, r1
 8000716:	81bb      	strh	r3, [r7, #12]
 8000718:	4613      	mov	r3, r2
 800071a:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	2b1e      	cmp	r3, #30
 8000720:	d961      	bls.n	80007e6 <ILI9341_DrawChar+0xe2>
 8000722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db5d      	blt.n	80007e6 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3b20      	subs	r3, #32
 8000746:	7ffa      	ldrb	r2, [r7, #31]
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	3304      	adds	r3, #4
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000754:	7fbb      	ldrb	r3, [r7, #30]
 8000756:	b29a      	uxth	r2, r3
 8000758:	7f7b      	ldrb	r3, [r7, #29]
 800075a:	b29c      	uxth	r4, r3
 800075c:	88f9      	ldrh	r1, [r7, #6]
 800075e:	89b8      	ldrh	r0, [r7, #12]
 8000760:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4623      	mov	r3, r4
 8000766:	f000 fceb 	bl	8001140 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
 800076e:	e035      	b.n	80007dc <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	e02b      	b.n	80007ce <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000776:	7f3b      	ldrb	r3, [r7, #28]
 8000778:	6a3a      	ldr	r2, [r7, #32]
 800077a:	fb02 f203 	mul.w	r2, r2, r3
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	10db      	asrs	r3, r3, #3
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	4413      	add	r3, r2
 8000788:	3301      	adds	r3, #1
 800078a:	69ba      	ldr	r2, [r7, #24]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	f003 0307 	and.w	r3, r3, #7
 8000798:	2201      	movs	r2, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80007a0:	7dfa      	ldrb	r2, [r7, #23]
 80007a2:	7dbb      	ldrb	r3, [r7, #22]
 80007a4:	4013      	ands	r3, r2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00d      	beq.n	80007c8 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	89bb      	ldrh	r3, [r7, #12]
 80007b2:	4413      	add	r3, r2
 80007b4:	b298      	uxth	r0, r3
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	4413      	add	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80007c2:	4619      	mov	r1, r3
 80007c4:	f000 fc56 	bl	8001074 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80007c8:	6a3b      	ldr	r3, [r7, #32]
 80007ca:	3301      	adds	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
 80007ce:	7fbb      	ldrb	r3, [r7, #30]
 80007d0:	6a3a      	ldr	r2, [r7, #32]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbcf      	blt.n	8000776 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d8:	3301      	adds	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
 80007dc:	7f7b      	ldrb	r3, [r7, #29]
 80007de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbc5      	blt.n	8000770 <ILI9341_DrawChar+0x6c>
 80007e4:	e000      	b.n	80007e8 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80007e6:	bf00      	nop
			}
		}
	}
}
 80007e8:	372c      	adds	r7, #44	; 0x2c
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}

080007ee <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b08a      	sub	sp, #40	; 0x28
 80007f2:	af02      	add	r7, sp, #8
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	4611      	mov	r1, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	460b      	mov	r3, r1
 80007fe:	80fb      	strh	r3, [r7, #6]
 8000800:	4613      	mov	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	785b      	ldrb	r3, [r3, #1]
 800080e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000810:	e02d      	b.n	800086e <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	7818      	ldrb	r0, [r3, #0]
 8000816:	88b9      	ldrh	r1, [r7, #4]
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	460b      	mov	r3, r1
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	f7ff ff6d 	bl	8000704 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3b20      	subs	r3, #32
 8000830:	7ffa      	ldrb	r2, [r7, #31]
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	3304      	adds	r3, #4
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	1c9a      	adds	r2, r3, #2
 8000848:	7fbb      	ldrb	r3, [r7, #30]
 800084a:	429a      	cmp	r2, r3
 800084c:	da07      	bge.n	800085e <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800084e:	7dfb      	ldrb	r3, [r7, #23]
 8000850:	b29a      	uxth	r2, r3
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	4413      	add	r3, r2
 8000856:	b29b      	uxth	r3, r3
 8000858:	3302      	adds	r3, #2
 800085a:	80fb      	strh	r3, [r7, #6]
 800085c:	e004      	b.n	8000868 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 800085e:	7fbb      	ldrb	r3, [r7, #30]
 8000860:	b29a      	uxth	r2, r3
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	4413      	add	r3, r2
 8000866:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1cd      	bne.n	8000812 <ILI9341_DrawText+0x24>
	}
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <ILI9341_DrawLine>:
		DelayUs(1);
	}
}

void ILI9341_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	4604      	mov	r4, r0
 8000888:	4608      	mov	r0, r1
 800088a:	4611      	mov	r1, r2
 800088c:	461a      	mov	r2, r3
 800088e:	4623      	mov	r3, r4
 8000890:	80fb      	strh	r3, [r7, #6]
 8000892:	4603      	mov	r3, r0
 8000894:	80bb      	strh	r3, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
 800089a:	4613      	mov	r3, r2
 800089c:	803b      	strh	r3, [r7, #0]
  int16_t dx = x1 - x0;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	82fb      	strh	r3, [r7, #22]
  int16_t dy = y1 - y0;
 80008a8:	883a      	ldrh	r2, [r7, #0]
 80008aa:	88bb      	ldrh	r3, [r7, #4]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	82bb      	strh	r3, [r7, #20]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 80008b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10b      	bne.n	80008d2 <ILI9341_DrawLine+0x52>
    // vertical line
    if (0 == dy)
 80008ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f000 80aa 	beq.w	8000a18 <ILI9341_DrawLine+0x198>
      { return; } // distance = 0, no line to draw
    ILI9341_DrawVLine(x0, y0, dy, color);
 80008c4:	88f8      	ldrh	r0, [r7, #6]
 80008c6:	88b9      	ldrh	r1, [r7, #4]
 80008c8:	8aba      	ldrh	r2, [r7, #20]
 80008ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80008cc:	f000 fcd8 	bl	8001280 <ILI9341_DrawVLine>
    return;
 80008d0:	e0a5      	b.n	8000a1e <ILI9341_DrawLine+0x19e>
  }
  else if (0 == dy) {
 80008d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10b      	bne.n	80008f2 <ILI9341_DrawLine+0x72>
    // horizontal line
    if (0 == dx)
 80008da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 809c 	beq.w	8000a1c <ILI9341_DrawLine+0x19c>
      { return; } // distance = 0, no line to draw
    ILI9341_DrawHLine(x0, y0, dx, color);
 80008e4:	88f8      	ldrh	r0, [r7, #6]
 80008e6:	88b9      	ldrh	r1, [r7, #4]
 80008e8:	8afa      	ldrh	r2, [r7, #22]
 80008ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80008ec:	f000 fc84 	bl	80011f8 <ILI9341_DrawHLine>
    return;
 80008f0:	e095      	b.n	8000a1e <ILI9341_DrawLine+0x19e>
  }

  int is_steep = abs(dy) > abs(dx);
 80008f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bfb8      	it	lt
 80008fa:	425b      	neglt	r3, r3
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000902:	2b00      	cmp	r3, #0
 8000904:	bfb8      	it	lt
 8000906:	425b      	neglt	r3, r3
 8000908:	b29b      	uxth	r3, r3
 800090a:	429a      	cmp	r2, r3
 800090c:	bf8c      	ite	hi
 800090e:	2301      	movhi	r3, #1
 8000910:	2300      	movls	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	613b      	str	r3, [r7, #16]
  if (is_steep) {
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00b      	beq.n	8000934 <ILI9341_DrawLine+0xb4>
    int16_t z0;
    int16_t z1;
    z0 = x0;
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	81fb      	strh	r3, [r7, #14]
    x0 = y0;
 8000920:	88bb      	ldrh	r3, [r7, #4]
 8000922:	80fb      	strh	r3, [r7, #6]
    y0 = z0;
 8000924:	89fb      	ldrh	r3, [r7, #14]
 8000926:	80bb      	strh	r3, [r7, #4]

    z1 = x1;
 8000928:	887b      	ldrh	r3, [r7, #2]
 800092a:	81bb      	strh	r3, [r7, #12]
    x1 = y1;
 800092c:	883b      	ldrh	r3, [r7, #0]
 800092e:	807b      	strh	r3, [r7, #2]
    y1 = z1;
 8000930:	89bb      	ldrh	r3, [r7, #12]
 8000932:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8000934:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000938:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800093c:	429a      	cmp	r2, r3
 800093e:	dd0b      	ble.n	8000958 <ILI9341_DrawLine+0xd8>
    int16_t z0;
    int16_t z1;

    z0 = x0;
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	817b      	strh	r3, [r7, #10]
    x0 = x1;
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	80fb      	strh	r3, [r7, #6]
    x1 = z0;
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	807b      	strh	r3, [r7, #2]

    z1 = y0;
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	813b      	strh	r3, [r7, #8]
    y0 = y1;
 8000950:	883b      	ldrh	r3, [r7, #0]
 8000952:	80bb      	strh	r3, [r7, #4]
    y1 = z1;
 8000954:	893b      	ldrh	r3, [r7, #8]
 8000956:	803b      	strh	r3, [r7, #0]
  }

  dx = x1 - x0;
 8000958:	887a      	ldrh	r2, [r7, #2]
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b29b      	uxth	r3, r3
 8000960:	82fb      	strh	r3, [r7, #22]
  dy = abs(y1 - y0);
 8000962:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000966:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	bfb8      	it	lt
 8000970:	425b      	neglt	r3, r3
 8000972:	82bb      	strh	r3, [r7, #20]
  err = dx >> 1;
 8000974:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000978:	105b      	asrs	r3, r3, #1
 800097a:	837b      	strh	r3, [r7, #26]

  if (y0 < y1)
 800097c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000980:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000984:	429a      	cmp	r2, r3
 8000986:	da02      	bge.n	800098e <ILI9341_DrawLine+0x10e>
    { step = 1; }
 8000988:	2301      	movs	r3, #1
 800098a:	833b      	strh	r3, [r7, #24]
 800098c:	e03d      	b.n	8000a0a <ILI9341_DrawLine+0x18a>
  else
    { step = -1; }
 800098e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000992:	833b      	strh	r3, [r7, #24]

  while (x0 <= x1) {
 8000994:	e039      	b.n	8000a0a <ILI9341_DrawLine+0x18a>

    if (is_steep)
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <ILI9341_DrawLine+0x126>
      { x = y0; y = x0; }
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	83fb      	strh	r3, [r7, #30]
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	83bb      	strh	r3, [r7, #28]
 80009a4:	e003      	b.n	80009ae <ILI9341_DrawLine+0x12e>
    else
      { x = x0; y = y0; }
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	83fb      	strh	r3, [r7, #30]
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	83bb      	strh	r3, [r7, #28]

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= 320) &&
 80009ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db12      	blt.n	80009dc <ILI9341_DrawLine+0x15c>
 80009b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80009be:	dc0d      	bgt.n	80009dc <ILI9341_DrawLine+0x15c>
 80009c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db09      	blt.n	80009dc <ILI9341_DrawLine+0x15c>
         (y >= 0) && (y <= 240) ) {
 80009c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80009cc:	2bf0      	cmp	r3, #240	; 0xf0
 80009ce:	dc05      	bgt.n	80009dc <ILI9341_DrawLine+0x15c>
    	ILI9341_DrawPixel(x, y, color);
 80009d0:	8bfb      	ldrh	r3, [r7, #30]
 80009d2:	8bb9      	ldrh	r1, [r7, #28]
 80009d4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fb4c 	bl	8001074 <ILI9341_DrawPixel>
    }

    err -= dy;
 80009dc:	8b7a      	ldrh	r2, [r7, #26]
 80009de:	8abb      	ldrh	r3, [r7, #20]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	837b      	strh	r3, [r7, #26]
    if (err < 0) {
 80009e6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	da09      	bge.n	8000a02 <ILI9341_DrawLine+0x182>
      y0 += step;
 80009ee:	88ba      	ldrh	r2, [r7, #4]
 80009f0:	8b3b      	ldrh	r3, [r7, #24]
 80009f2:	4413      	add	r3, r2
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80009f8:	8b7a      	ldrh	r2, [r7, #26]
 80009fa:	8afb      	ldrh	r3, [r7, #22]
 80009fc:	4413      	add	r3, r2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	837b      	strh	r3, [r7, #26]
    }

    ++x0;
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	3301      	adds	r3, #1
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	80fb      	strh	r3, [r7, #6]
  while (x0 <= x1) {
 8000a0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	ddbf      	ble.n	8000996 <ILI9341_DrawLine+0x116>
 8000a16:	e002      	b.n	8000a1e <ILI9341_DrawLine+0x19e>
      { return; } // distance = 0, no line to draw
 8000a18:	bf00      	nop
 8000a1a:	e000      	b.n	8000a1e <ILI9341_DrawLine+0x19e>
      { return; } // distance = 0, no line to draw
 8000a1c:	bf00      	nop
  }
}
 8000a1e:	3724      	adds	r7, #36	; 0x24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}

08000a24 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_SPI_TxCpltCallback+0x24>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d105      	bne.n	8000a40 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <HAL_SPI_TxCpltCallback+0x28>)
 8000a3c:	f002 fb4c 	bl	80030d8 <HAL_GPIO_WritePin>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001f4 	.word	0x200001f4
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000a5a:	bf00      	nop
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <ILI9341_SPI_Tx+0x30>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d1f8      	bne.n	8000a5c <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <ILI9341_SPI_Tx+0x30>)
 8000a72:	f003 f9d9 	bl	8003e28 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001f4 	.word	0x200001f4

08000a84 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000a90:	bf00      	nop
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <ILI9341_SPI_TxBuffer+0x30>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d1f8      	bne.n	8000a92 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <ILI9341_SPI_TxBuffer+0x30>)
 8000aa8:	f003 f9be 	bl	8003e28 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001f4 	.word	0x200001f4

08000ab8 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <ILI9341_WriteCommand+0x30>)
 8000ac8:	f002 fb06 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <ILI9341_WriteCommand+0x30>)
 8000ad4:	f002 fb00 	bl	80030d8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ffb8 	bl	8000a50 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <ILI9341_WriteData+0x30>)
 8000afc:	f002 faec 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <ILI9341_WriteData+0x30>)
 8000b08:	f002 fae6 	bl	80030d8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff9e 	bl	8000a50 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <ILI9341_WriteBuffer+0x34>)
 8000b32:	f002 fad1 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <ILI9341_WriteBuffer+0x34>)
 8000b3e:	f002 facb 	bl	80030d8 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	4619      	mov	r1, r3
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff9c 	bl	8000a84 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000b96:	202a      	movs	r0, #42	; 0x2a
 8000b98:	f7ff ff8e 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ffbc 	bl	8000b20 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	0a1b      	lsrs	r3, r3, #8
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000bb8:	883b      	ldrh	r3, [r7, #0]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000bc2:	883b      	ldrh	r3, [r7, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000bc8:	202b      	movs	r0, #43	; 0x2b
 8000bca:	f7ff ff75 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ffa3 	bl	8000b20 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000bda:	202c      	movs	r0, #44	; 0x2c
 8000bdc:	f7ff ff6c 	bl	8000ab8 <ILI9341_WriteCommand>
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd90      	pop	{r4, r7, pc}

08000be8 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000bec:	2200      	movs	r2, #0
 8000bee:	2102      	movs	r1, #2
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <ILI9341_Reset+0x40>)
 8000bf2:	f002 fa71 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bf6:	200a      	movs	r0, #10
 8000bf8:	f001 f9c8 	bl	8001f8c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c02:	4809      	ldr	r0, [pc, #36]	; (8000c28 <ILI9341_Reset+0x40>)
 8000c04:	f002 fa68 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f001 f9bf 	bl	8001f8c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2102      	movs	r1, #2
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <ILI9341_Reset+0x40>)
 8000c14:	f002 fa60 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1e:	4802      	ldr	r0, [pc, #8]	; (8000c28 <ILI9341_Reset+0x40>)
 8000c20:	f002 fa5a 	bl	80030d8 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40010c00 	.word	0x40010c00

08000c2c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000c30:	2201      	movs	r2, #1
 8000c32:	2102      	movs	r1, #2
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <ILI9341_Enable+0x14>)
 8000c36:	f002 fa4f 	bl	80030d8 <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000c48:	f7ff fff0 	bl	8000c2c <ILI9341_Enable>
	ILI9341_Reset();
 8000c4c:	f7ff ffcc 	bl	8000be8 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f7ff ff31 	bl	8000ab8 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f001 f998 	bl	8001f8c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000c5c:	20cb      	movs	r0, #203	; 0xcb
 8000c5e:	f7ff ff2b 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000c62:	2039      	movs	r0, #57	; 0x39
 8000c64:	f7ff ff42 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000c68:	202c      	movs	r0, #44	; 0x2c
 8000c6a:	f7ff ff3f 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff ff3c 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000c74:	2034      	movs	r0, #52	; 0x34
 8000c76:	f7ff ff39 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f7ff ff36 	bl	8000aec <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000c80:	20cf      	movs	r0, #207	; 0xcf
 8000c82:	f7ff ff19 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff ff30 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000c8c:	20c1      	movs	r0, #193	; 0xc1
 8000c8e:	f7ff ff2d 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000c92:	2030      	movs	r0, #48	; 0x30
 8000c94:	f7ff ff2a 	bl	8000aec <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000c98:	20e8      	movs	r0, #232	; 0xe8
 8000c9a:	f7ff ff0d 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000c9e:	2085      	movs	r0, #133	; 0x85
 8000ca0:	f7ff ff24 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff ff21 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000caa:	2078      	movs	r0, #120	; 0x78
 8000cac:	f7ff ff1e 	bl	8000aec <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000cb0:	20ea      	movs	r0, #234	; 0xea
 8000cb2:	f7ff ff01 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff ff18 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff15 	bl	8000aec <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000cc2:	20ed      	movs	r0, #237	; 0xed
 8000cc4:	f7ff fef8 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f7ff ff0f 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f7ff ff0c 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000cd4:	2012      	movs	r0, #18
 8000cd6:	f7ff ff09 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000cda:	2081      	movs	r0, #129	; 0x81
 8000cdc:	f7ff ff06 	bl	8000aec <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000ce0:	20f7      	movs	r0, #247	; 0xf7
 8000ce2:	f7ff fee9 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000ce6:	2020      	movs	r0, #32
 8000ce8:	f7ff ff00 	bl	8000aec <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000cec:	20c0      	movs	r0, #192	; 0xc0
 8000cee:	f7ff fee3 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000cf2:	2023      	movs	r0, #35	; 0x23
 8000cf4:	f7ff fefa 	bl	8000aec <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000cf8:	20c1      	movs	r0, #193	; 0xc1
 8000cfa:	f7ff fedd 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000cfe:	2010      	movs	r0, #16
 8000d00:	f7ff fef4 	bl	8000aec <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000d04:	20c5      	movs	r0, #197	; 0xc5
 8000d06:	f7ff fed7 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000d0a:	203e      	movs	r0, #62	; 0x3e
 8000d0c:	f7ff feee 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000d10:	2028      	movs	r0, #40	; 0x28
 8000d12:	f7ff feeb 	bl	8000aec <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000d16:	20c7      	movs	r0, #199	; 0xc7
 8000d18:	f7ff fece 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000d1c:	2086      	movs	r0, #134	; 0x86
 8000d1e:	f7ff fee5 	bl	8000aec <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000d22:	2036      	movs	r0, #54	; 0x36
 8000d24:	f7ff fec8 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000d28:	2048      	movs	r0, #72	; 0x48
 8000d2a:	f7ff fedf 	bl	8000aec <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000d2e:	203a      	movs	r0, #58	; 0x3a
 8000d30:	f7ff fec2 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000d34:	2055      	movs	r0, #85	; 0x55
 8000d36:	f7ff fed9 	bl	8000aec <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000d3a:	20b1      	movs	r0, #177	; 0xb1
 8000d3c:	f7ff febc 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fed3 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000d46:	2018      	movs	r0, #24
 8000d48:	f7ff fed0 	bl	8000aec <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000d4c:	20b6      	movs	r0, #182	; 0xb6
 8000d4e:	f7ff feb3 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000d52:	2008      	movs	r0, #8
 8000d54:	f7ff feca 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000d58:	2082      	movs	r0, #130	; 0x82
 8000d5a:	f7ff fec7 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000d5e:	2027      	movs	r0, #39	; 0x27
 8000d60:	f7ff fec4 	bl	8000aec <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000d64:	20f2      	movs	r0, #242	; 0xf2
 8000d66:	f7ff fea7 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff febe 	bl	8000aec <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000d70:	2026      	movs	r0, #38	; 0x26
 8000d72:	f7ff fea1 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f7ff feb8 	bl	8000aec <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000d7c:	20e0      	movs	r0, #224	; 0xe0
 8000d7e:	f7ff fe9b 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000d82:	200f      	movs	r0, #15
 8000d84:	f7ff feb2 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d88:	2031      	movs	r0, #49	; 0x31
 8000d8a:	f7ff feaf 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000d8e:	202b      	movs	r0, #43	; 0x2b
 8000d90:	f7ff feac 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000d94:	200c      	movs	r0, #12
 8000d96:	f7ff fea9 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d9a:	200e      	movs	r0, #14
 8000d9c:	f7ff fea6 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000da0:	2008      	movs	r0, #8
 8000da2:	f7ff fea3 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000da6:	204e      	movs	r0, #78	; 0x4e
 8000da8:	f7ff fea0 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000dac:	20f1      	movs	r0, #241	; 0xf1
 8000dae:	f7ff fe9d 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000db2:	2037      	movs	r0, #55	; 0x37
 8000db4:	f7ff fe9a 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000db8:	2007      	movs	r0, #7
 8000dba:	f7ff fe97 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000dbe:	2010      	movs	r0, #16
 8000dc0:	f7ff fe94 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f7ff fe91 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000dca:	200e      	movs	r0, #14
 8000dcc:	f7ff fe8e 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000dd0:	2009      	movs	r0, #9
 8000dd2:	f7ff fe8b 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff fe88 	bl	8000aec <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000ddc:	20e1      	movs	r0, #225	; 0xe1
 8000dde:	f7ff fe6b 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fe82 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000de8:	200e      	movs	r0, #14
 8000dea:	f7ff fe7f 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000dee:	2014      	movs	r0, #20
 8000df0:	f7ff fe7c 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f7ff fe79 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000dfa:	2011      	movs	r0, #17
 8000dfc:	f7ff fe76 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000e00:	2007      	movs	r0, #7
 8000e02:	f7ff fe73 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e06:	2031      	movs	r0, #49	; 0x31
 8000e08:	f7ff fe70 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000e0c:	20c1      	movs	r0, #193	; 0xc1
 8000e0e:	f7ff fe6d 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000e12:	2048      	movs	r0, #72	; 0x48
 8000e14:	f7ff fe6a 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000e18:	2008      	movs	r0, #8
 8000e1a:	f7ff fe67 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f7ff fe64 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000e24:	200c      	movs	r0, #12
 8000e26:	f7ff fe61 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e2a:	2031      	movs	r0, #49	; 0x31
 8000e2c:	f7ff fe5e 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000e30:	2036      	movs	r0, #54	; 0x36
 8000e32:	f7ff fe5b 	bl	8000aec <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000e36:	200f      	movs	r0, #15
 8000e38:	f7ff fe58 	bl	8000aec <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000e3c:	2011      	movs	r0, #17
 8000e3e:	f7ff fe3b 	bl	8000ab8 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000e42:	2064      	movs	r0, #100	; 0x64
 8000e44:	f001 f8a2 	bl	8001f8c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000e48:	2029      	movs	r0, #41	; 0x29
 8000e4a:	f7ff fe35 	bl	8000ab8 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f802 	bl	8000e58 <ILI9341_SetRotation>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000e62:	2036      	movs	r0, #54	; 0x36
 8000e64:	f7ff fe28 	bl	8000ab8 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f001 f88f 	bl	8001f8c <HAL_Delay>

	switch(rotation)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d837      	bhi.n	8000ee4 <ILI9341_SetRotation+0x8c>
 8000e74:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <ILI9341_SetRotation+0x24>)
 8000e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7a:	bf00      	nop
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000ea3 	.word	0x08000ea3
 8000e84:	08000eb9 	.word	0x08000eb9
 8000e88:	08000ecf 	.word	0x08000ecf
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000e8c:	2048      	movs	r0, #72	; 0x48
 8000e8e:	f7ff fe2d 	bl	8000aec <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <ILI9341_SetRotation+0x98>)
 8000e94:	22f0      	movs	r2, #240	; 0xf0
 8000e96:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <ILI9341_SetRotation+0x9c>)
 8000e9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e9e:	801a      	strh	r2, [r3, #0]
		break;
 8000ea0:	e021      	b.n	8000ee6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000ea2:	2028      	movs	r0, #40	; 0x28
 8000ea4:	f7ff fe22 	bl	8000aec <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <ILI9341_SetRotation+0x98>)
 8000eaa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eae:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <ILI9341_SetRotation+0x9c>)
 8000eb2:	22f0      	movs	r2, #240	; 0xf0
 8000eb4:	801a      	strh	r2, [r3, #0]
		break;
 8000eb6:	e016      	b.n	8000ee6 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000eb8:	2088      	movs	r0, #136	; 0x88
 8000eba:	f7ff fe17 	bl	8000aec <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <ILI9341_SetRotation+0x98>)
 8000ec0:	22f0      	movs	r2, #240	; 0xf0
 8000ec2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <ILI9341_SetRotation+0x9c>)
 8000ec6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eca:	801a      	strh	r2, [r3, #0]
		break;
 8000ecc:	e00b      	b.n	8000ee6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000ece:	20e8      	movs	r0, #232	; 0xe8
 8000ed0:	f7ff fe0c 	bl	8000aec <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <ILI9341_SetRotation+0x98>)
 8000ed6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <ILI9341_SetRotation+0x9c>)
 8000ede:	22f0      	movs	r2, #240	; 0xf0
 8000ee0:	801a      	strh	r2, [r3, #0]
		break;
 8000ee2:	e000      	b.n	8000ee6 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000ee4:	bf00      	nop
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000002 	.word	0x20000002
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	466b      	mov	r3, sp
 8000f06:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f14:	d202      	bcs.n	8000f1c <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	e002      	b.n	8000f22 <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000f1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2101      	movs	r1, #1
 8000f26:	483e      	ldr	r0, [pc, #248]	; (8001020 <ILI9341_DrawColorBurst+0x128>)
 8000f28:	f002 f8d6 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	483b      	ldr	r0, [pc, #236]	; (8001020 <ILI9341_DrawColorBurst+0x128>)
 8000f34:	f002 f8d0 	bl	80030d8 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000f42:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000f44:	4623      	mov	r3, r4
 8000f46:	3b01      	subs	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f04f 0100 	mov.w	r1, #0
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	00cb      	lsls	r3, r1, #3
 8000f5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f5e:	00c2      	lsls	r2, r0, #3
 8000f60:	4620      	mov	r0, r4
 8000f62:	f04f 0100 	mov.w	r1, #0
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	00cb      	lsls	r3, r1, #3
 8000f70:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f74:	00c2      	lsls	r2, r0, #3
 8000f76:	1de3      	adds	r3, r4, #7
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f80:	466b      	mov	r3, sp
 8000f82:	3300      	adds	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f8a:	e00e      	b.n	8000faa <ILI9341_DrawColorBurst+0xb2>
	{
		BurstBuffer[j] = chifted;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	4413      	add	r3, r2
 8000f92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f96:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	b2d1      	uxtb	r1, r2
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d3ec      	bcc.n	8000f8c <ILI9341_DrawColorBurst+0x94>
	}

	uint32_t SendingSize = size * 2;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fcc:	fb01 f202 	mul.w	r2, r1, r2
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d010      	beq.n	8000ffc <ILI9341_DrawColorBurst+0x104>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fde:	e009      	b.n	8000ff4 <ILI9341_DrawColorBurst+0xfc>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000fe0:	69b9      	ldr	r1, [r7, #24]
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	480e      	ldr	r0, [pc, #56]	; (8001024 <ILI9341_DrawColorBurst+0x12c>)
 8000fea:	f002 fde1 	bl	8003bb0 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3f1      	bcc.n	8000fe0 <ILI9341_DrawColorBurst+0xe8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000ffc:	69b9      	ldr	r1, [r7, #24]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	b29a      	uxth	r2, r3
 8001002:	230a      	movs	r3, #10
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <ILI9341_DrawColorBurst+0x12c>)
 8001006:	f002 fdd3 	bl	8003bb0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <ILI9341_DrawColorBurst+0x128>)
 8001012:	f002 f861 	bl	80030d8 <HAL_GPIO_WritePin>
 8001016:	46ad      	mov	sp, r5
}
 8001018:	bf00      	nop
 800101a:	3730      	adds	r7, #48	; 0x30
 800101c:	46bd      	mov	sp, r7
 800101e:	bdb0      	pop	{r4, r5, r7, pc}
 8001020:	40010c00 	.word	0x40010c00
 8001024:	200001f4 	.word	0x200001f4

08001028 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <ILI9341_FillScreen+0x44>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <ILI9341_FillScreen+0x48>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	b29b      	uxth	r3, r3
 800103e:	2100      	movs	r1, #0
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fd89 	bl	8000b58 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <ILI9341_FillScreen+0x44>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <ILI9341_FillScreen+0x48>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	fb03 f302 	mul.w	r3, r3, r2
 8001058:	461a      	mov	r2, r3
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff4a 	bl	8000ef8 <ILI9341_DrawColorBurst>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000002 	.word	0x20000002
 8001070:	20000000 	.word	0x20000000

08001074 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
 800107e:	460b      	mov	r3, r1
 8001080:	80bb      	strh	r3, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <ILI9341_DrawPixel+0xc4>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	429a      	cmp	r2, r3
 8001090:	d24d      	bcs.n	800112e <ILI9341_DrawPixel+0xba>
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <ILI9341_DrawPixel+0xc8>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	88ba      	ldrh	r2, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	d247      	bcs.n	800112e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	753b      	strb	r3, [r7, #20]
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	757b      	strb	r3, [r7, #21]
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	3301      	adds	r3, #1
 80010b2:	121b      	asrs	r3, r3, #8
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	75bb      	strb	r3, [r7, #22]
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	743b      	strb	r3, [r7, #16]
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	747b      	strb	r3, [r7, #17]
 80010d2:	88bb      	ldrh	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	121b      	asrs	r3, r3, #8
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	74bb      	strb	r3, [r7, #18]
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	733b      	strb	r3, [r7, #12]
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80010f6:	202a      	movs	r0, #42	; 0x2a
 80010f8:	f7ff fcde 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fd0c 	bl	8000b20 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001108:	202b      	movs	r0, #43	; 0x2b
 800110a:	f7ff fcd5 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	2104      	movs	r1, #4
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fd03 	bl	8000b20 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800111a:	202c      	movs	r0, #44	; 0x2c
 800111c:	f7ff fccc 	bl	8000ab8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fcfa 	bl	8000b20 <ILI9341_WriteBuffer>
 800112c:	e000      	b.n	8001130 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800112e:	bf00      	nop
}
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000002 	.word	0x20000002
 800113c:	20000000 	.word	0x20000000

08001140 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4604      	mov	r4, r0
 8001148:	4608      	mov	r0, r1
 800114a:	4611      	mov	r1, r2
 800114c:	461a      	mov	r2, r3
 800114e:	4623      	mov	r3, r4
 8001150:	80fb      	strh	r3, [r7, #6]
 8001152:	4603      	mov	r3, r0
 8001154:	80bb      	strh	r3, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	807b      	strh	r3, [r7, #2]
 800115a:	4613      	mov	r3, r2
 800115c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <ILI9341_DrawRectangle+0xb0>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	88fa      	ldrh	r2, [r7, #6]
 8001166:	429a      	cmp	r2, r3
 8001168:	d23d      	bcs.n	80011e6 <ILI9341_DrawRectangle+0xa6>
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <ILI9341_DrawRectangle+0xb4>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	88ba      	ldrh	r2, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	d237      	bcs.n	80011e6 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001176:	88fa      	ldrh	r2, [r7, #6]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	4413      	add	r3, r2
 800117c:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <ILI9341_DrawRectangle+0xb0>)
 800117e:	8812      	ldrh	r2, [r2, #0]
 8001180:	b292      	uxth	r2, r2
 8001182:	4293      	cmp	r3, r2
 8001184:	dd05      	ble.n	8001192 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <ILI9341_DrawRectangle+0xb0>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	b29a      	uxth	r2, r3
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001192:	88ba      	ldrh	r2, [r7, #4]
 8001194:	883b      	ldrh	r3, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <ILI9341_DrawRectangle+0xb4>)
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	b292      	uxth	r2, r2
 800119e:	4293      	cmp	r3, r2
 80011a0:	dd05      	ble.n	80011ae <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <ILI9341_DrawRectangle+0xb4>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80011ae:	88fa      	ldrh	r2, [r7, #6]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	4413      	add	r3, r2
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29c      	uxth	r4, r3
 80011ba:	88ba      	ldrh	r2, [r7, #4]
 80011bc:	883b      	ldrh	r3, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	88b9      	ldrh	r1, [r7, #4]
 80011c8:	88f8      	ldrh	r0, [r7, #6]
 80011ca:	4622      	mov	r2, r4
 80011cc:	f7ff fcc4 	bl	8000b58 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80011d0:	883b      	ldrh	r3, [r7, #0]
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	8b3b      	ldrh	r3, [r7, #24]
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fe8a 	bl	8000ef8 <ILI9341_DrawColorBurst>
 80011e4:	e000      	b.n	80011e8 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011e6:	bf00      	nop
}
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000002 	.word	0x20000002
 80011f4:	20000000 	.word	0x20000000

080011f8 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	4603      	mov	r3, r0
 800120c:	80bb      	strh	r3, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <ILI9341_DrawHLine+0x80>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	429a      	cmp	r2, r3
 8001220:	d225      	bcs.n	800126e <ILI9341_DrawHLine+0x76>
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <ILI9341_DrawHLine+0x84>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	88ba      	ldrh	r2, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d21f      	bcs.n	800126e <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800122e:	88fa      	ldrh	r2, [r7, #6]
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	4413      	add	r3, r2
 8001234:	4a10      	ldr	r2, [pc, #64]	; (8001278 <ILI9341_DrawHLine+0x80>)
 8001236:	8812      	ldrh	r2, [r2, #0]
 8001238:	b292      	uxth	r2, r2
 800123a:	4293      	cmp	r3, r2
 800123c:	dd05      	ble.n	800124a <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <ILI9341_DrawHLine+0x80>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b29a      	uxth	r2, r3
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	3b01      	subs	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	88b9      	ldrh	r1, [r7, #4]
 800125a:	88f8      	ldrh	r0, [r7, #6]
 800125c:	f7ff fc7c 	bl	8000b58 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001260:	887a      	ldrh	r2, [r7, #2]
 8001262:	883b      	ldrh	r3, [r7, #0]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fe46 	bl	8000ef8 <ILI9341_DrawColorBurst>
 800126c:	e000      	b.n	8001270 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800126e:	bf00      	nop
}
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	bf00      	nop
 8001278:	20000002 	.word	0x20000002
 800127c:	20000000 	.word	0x20000000

08001280 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4623      	mov	r3, r4
 8001290:	80fb      	strh	r3, [r7, #6]
 8001292:	4603      	mov	r3, r0
 8001294:	80bb      	strh	r3, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]
 800129a:	4613      	mov	r3, r2
 800129c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <ILI9341_DrawVLine+0x80>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	88fa      	ldrh	r2, [r7, #6]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d225      	bcs.n	80012f6 <ILI9341_DrawVLine+0x76>
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <ILI9341_DrawVLine+0x84>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	88ba      	ldrh	r2, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d21f      	bcs.n	80012f6 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80012b6:	88ba      	ldrh	r2, [r7, #4]
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a11      	ldr	r2, [pc, #68]	; (8001304 <ILI9341_DrawVLine+0x84>)
 80012be:	8812      	ldrh	r2, [r2, #0]
 80012c0:	b292      	uxth	r2, r2
 80012c2:	4293      	cmp	r3, r2
 80012c4:	dd05      	ble.n	80012d2 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <ILI9341_DrawVLine+0x84>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80012d2:	88ba      	ldrh	r2, [r7, #4]
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29b      	uxth	r3, r3
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	88b9      	ldrh	r1, [r7, #4]
 80012e2:	88f8      	ldrh	r0, [r7, #6]
 80012e4:	f7ff fc38 	bl	8000b58 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 80012e8:	887a      	ldrh	r2, [r7, #2]
 80012ea:	883b      	ldrh	r3, [r7, #0]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe02 	bl	8000ef8 <ILI9341_DrawColorBurst>
 80012f4:	e000      	b.n	80012f8 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80012f6:	bf00      	nop
}
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000002 	.word	0x20000002
 8001304:	20000000 	.word	0x20000000

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130e:	f000 fddb 	bl	8001ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001312:	f000 f8bb 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001316:	f000 fab9 	bl	800188c <MX_GPIO_Init>
  MX_DMA_Init();
 800131a:	f000 fa99 	bl	8001850 <MX_DMA_Init>
  MX_SPI1_Init();
 800131e:	f000 f94f 	bl	80015c0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001322:	f000 f90f 	bl	8001544 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001326:	f000 f9cd 	bl	80016c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800132a:	f000 fa67 	bl	80017fc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800132e:	f000 f97d 	bl	800162c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001332:	f000 fa15 	bl	8001760 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001336:	f7ff fc85 	bl	8000c44 <ILI9341_Init>
  HAL_TIM_Base_Start_IT(&htim3);	// screen update timer
 800133a:	4846      	ldr	r0, [pc, #280]	; (8001454 <main+0x14c>)
 800133c:	f002 ffb4 	bl	80042a8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8001340:	4845      	ldr	r0, [pc, #276]	; (8001458 <main+0x150>)
 8001342:	f000 ff1f 	bl	8002184 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);	// adc timer
 8001346:	4845      	ldr	r0, [pc, #276]	; (800145c <main+0x154>)
 8001348:	f002 ffae 	bl	80042a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);	// bpm counter timer
 800134c:	4844      	ldr	r0, [pc, #272]	; (8001460 <main+0x158>)
 800134e:	f002 ffab 	bl	80042a8 <HAL_TIM_Base_Start_IT>

  ILI9341_FillScreen(BLACK);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fe68 	bl	8001028 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fd7d 	bl	8000e58 <ILI9341_SetRotation>

  ILI9341_DrawText("BPM value: ", FONT3, 10, 5, WHITE, BLACK);
 800135e:	2300      	movs	r3, #0
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2305      	movs	r3, #5
 800136a:	220a      	movs	r2, #10
 800136c:	493d      	ldr	r1, [pc, #244]	; (8001464 <main+0x15c>)
 800136e:	483e      	ldr	r0, [pc, #248]	; (8001468 <main+0x160>)
 8001370:	f7ff fa3d 	bl	80007ee <ILI9341_DrawText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  	while(screenFlag != 0)
 8001374:	e069      	b.n	800144a <main+0x142>
	  	{
			y = (215 - (adcVal/19)) + 25; 	// normalize between 0 and 215 (leave top 25 pixels for BPM monitoring)
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <main+0x164>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <main+0x168>)
 800137c:	fba3 1302 	umull	r1, r3, r3, r2
 8001380:	1ad2      	subs	r2, r2, r3
 8001382:	0852      	lsrs	r2, r2, #1
 8001384:	4413      	add	r3, r2
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800138c:	4a39      	ldr	r2, [pc, #228]	; (8001474 <main+0x16c>)
 800138e:	6013      	str	r3, [r2, #0]

			if(y < PEAK_THRESHOLD_PIXELS && bpmFlag == 0)
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <main+0x16c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b3b      	cmp	r3, #59	; 0x3b
 8001396:	d808      	bhi.n	80013aa <main+0xa2>
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <main+0x170>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d104      	bne.n	80013aa <main+0xa2>
			{
				bpmFlag = 1;
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <main+0x170>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
				updateBPM();
 80013a6:	f000 fb11 	bl	80019cc <updateBPM>
			}

			if(y > PEAK_THRESHOLD_PIXELS && bpmFlag == 1)
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <main+0x16c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b3c      	cmp	r3, #60	; 0x3c
 80013b0:	d906      	bls.n	80013c0 <main+0xb8>
 80013b2:	4b31      	ldr	r3, [pc, #196]	; (8001478 <main+0x170>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d102      	bne.n	80013c0 <main+0xb8>
			{
				bpmFlag = 0;
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <main+0x170>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
			}

			ILI9341_DrawLine(xPos, yOld, xPos + 1, y, WHITE);
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <main+0x174>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b218      	sxth	r0, r3
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <main+0x178>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b219      	sxth	r1, r3
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <main+0x174>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <main+0x16c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80013e2:	9400      	str	r4, [sp, #0]
 80013e4:	f7ff fa4c 	bl	8000880 <ILI9341_DrawLine>
			xPos = xPos + 1;
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <main+0x174>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <main+0x174>)
 80013f0:	6013      	str	r3, [r2, #0]
			yOld = y;
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <main+0x16c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a22      	ldr	r2, [pc, #136]	; (8001480 <main+0x178>)
 80013f8:	6013      	str	r3, [r2, #0]

			if(xPos >= SCREEN_WIDTH)
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <main+0x174>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001402:	d31f      	bcc.n	8001444 <main+0x13c>
			{
				xPos = 0;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <main+0x174>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
				ILI9341_DrawFilledRectangleCoord(0, 25, 320, 240, BLACK);
 800140a:	2300      	movs	r3, #0
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	23f0      	movs	r3, #240	; 0xf0
 8001410:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001414:	2119      	movs	r1, #25
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff f916 	bl	8000648 <ILI9341_DrawFilledRectangleCoord>
				ILI9341_DrawFilledRectangleCoord(95, 0, 320, 25, BLACK);
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2319      	movs	r3, #25
 8001422:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001426:	2100      	movs	r1, #0
 8001428:	205f      	movs	r0, #95	; 0x5f
 800142a:	f7ff f90d 	bl	8000648 <ILI9341_DrawFilledRectangleCoord>
				ILI9341_DrawText(msg, FONT3, 95, 5, WHITE, BLACK);
 800142e:	2300      	movs	r3, #0
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2305      	movs	r3, #5
 800143a:	225f      	movs	r2, #95	; 0x5f
 800143c:	4909      	ldr	r1, [pc, #36]	; (8001464 <main+0x15c>)
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <main+0x17c>)
 8001440:	f7ff f9d5 	bl	80007ee <ILI9341_DrawText>
			}
			screenFlag = 0;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <main+0x180>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
	  	while(screenFlag != 0)
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <main+0x180>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d191      	bne.n	8001376 <main+0x6e>
 8001452:	e7fa      	b.n	800144a <main+0x142>
 8001454:	2000011c 	.word	0x2000011c
 8001458:	20000168 	.word	0x20000168
 800145c:	2000024c 	.word	0x2000024c
 8001460:	200000a0 	.word	0x200000a0
 8001464:	080054c8 	.word	0x080054c8
 8001468:	080054a4 	.word	0x080054a4
 800146c:	200001e0 	.word	0x200001e0
 8001470:	af286bcb 	.word	0xaf286bcb
 8001474:	200001e8 	.word	0x200001e8
 8001478:	200001ec 	.word	0x200001ec
 800147c:	200001f0 	.word	0x200001f0
 8001480:	20000004 	.word	0x20000004
 8001484:	200000e8 	.word	0x200000e8
 8001488:	200002d8 	.word	0x200002d8

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	; 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	2228      	movs	r2, #40	; 0x28
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fbb4 	bl	8004c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014bc:	2301      	movs	r3, #1
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ca:	2301      	movs	r3, #1
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	2302      	movs	r3, #2
 80014d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fe10 	bl	8003108 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014ee:	f000 faa3 	bl	8001a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001502:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f002 f87a 	bl	8003608 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800151a:	f000 fa8d 	bl	8001a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800151e:	2302      	movs	r3, #2
 8001520:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001526:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fa06 	bl	800393c <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001536:	f000 fa7f 	bl	8001a38 <Error_Handler>
  }
}
 800153a:	bf00      	nop
 800153c:	3750      	adds	r7, #80	; 0x50
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_ADC1_Init+0x74>)
 8001556:	4a19      	ldr	r2, [pc, #100]	; (80015bc <MX_ADC1_Init+0x78>)
 8001558:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_ADC1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_ADC1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_ADC1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_ADC1_Init+0x74>)
 800156e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001572:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_ADC1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_ADC1_Init+0x74>)
 800157c:	2201      	movs	r2, #1
 800157e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_ADC1_Init+0x74>)
 8001582:	f000 fd27 	bl	8001fd4 <HAL_ADC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800158c:	f000 fa54 	bl	8001a38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001590:	2301      	movs	r3, #1
 8001592:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001594:	2301      	movs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_ADC1_Init+0x74>)
 80015a2:	f000 ff7d 	bl	80024a0 <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80015ac:	f000 fa44 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000168 	.word	0x20000168
 80015bc:	40012400 	.word	0x40012400

080015c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_SPI1_Init+0x64>)
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <MX_SPI1_Init+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_SPI1_Init+0x64>)
 80015cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_SPI1_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_SPI1_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_SPI1_Init+0x64>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_SPI1_Init+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_SPI1_Init+0x64>)
 80015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_SPI1_Init+0x64>)
 80015f4:	2208      	movs	r2, #8
 80015f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_SPI1_Init+0x64>)
 800160c:	220a      	movs	r2, #10
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_SPI1_Init+0x64>)
 8001612:	f002 fa49 	bl	8003aa8 <HAL_SPI_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800161c:	f000 fa0c 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200001f4 	.word	0x200001f4
 8001628:	40013000 	.word	0x40013000

0800162c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_TIM2_Init+0x94>)
 800164a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001652:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_TIM2_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001660:	221e      	movs	r2, #30
 8001662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_TIM2_Init+0x94>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001672:	f002 fdc9 	bl	8004208 <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800167c:	f000 f9dc 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_TIM2_Init+0x94>)
 800168e:	f002 ff65 	bl	800455c <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001698:	f000 f9ce 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_TIM2_Init+0x94>)
 80016aa:	f003 f937 	bl	800491c <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016b4:	f000 f9c0 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000024c 	.word	0x2000024c

080016c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM3_Init+0x94>)
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <MX_TIM3_Init+0x98>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_TIM3_Init+0x94>)
 80016e8:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80016ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_TIM3_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_TIM3_Init+0x94>)
 80016f6:	221e      	movs	r2, #30
 80016f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_TIM3_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_TIM3_Init+0x94>)
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_TIM3_Init+0x94>)
 8001708:	f002 fd7e 	bl	8004208 <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 f991 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_TIM3_Init+0x94>)
 8001724:	f002 ff1a 	bl	800455c <HAL_TIM_ConfigClockSource>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800172e:	f000 f983 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001732:	2320      	movs	r3, #32
 8001734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_TIM3_Init+0x94>)
 8001740:	f003 f8ec 	bl	800491c <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800174a:	f000 f975 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000011c 	.word	0x2000011c
 800175c:	40000400 	.word	0x40000400

08001760 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_TIM4_Init+0x94>)
 800177e:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <MX_TIM4_Init+0x98>)
 8001780:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_TIM4_Init+0x94>)
 8001784:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001788:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_TIM4_Init+0x94>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_TIM4_Init+0x94>)
 8001792:	2264      	movs	r2, #100	; 0x64
 8001794:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_TIM4_Init+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_TIM4_Init+0x94>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <MX_TIM4_Init+0x94>)
 80017a4:	f002 fd30 	bl	8004208 <HAL_TIM_Base_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017ae:	f000 f943 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4619      	mov	r1, r3
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_TIM4_Init+0x94>)
 80017c0:	f002 fecc 	bl	800455c <HAL_TIM_ConfigClockSource>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80017ca:	f000 f935 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d6:	463b      	mov	r3, r7
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_TIM4_Init+0x94>)
 80017dc:	f003 f89e 	bl	800491c <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80017e6:	f000 f927 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200000a0 	.word	0x200000a0
 80017f8:	40000800 	.word	0x40000800

080017fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <MX_USART1_UART_Init+0x50>)
 8001804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001808:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800180c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_USART1_UART_Init+0x4c>)
 8001834:	f003 f8e2 	bl	80049fc <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800183e:	f000 f8fb 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000198 	.word	0x20000198
 800184c:	40013800 	.word	0x40013800

08001850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_DMA_Init+0x38>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <MX_DMA_Init+0x38>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6153      	str	r3, [r2, #20]
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_DMA_Init+0x38>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	200d      	movs	r0, #13
 8001874:	f001 f887 	bl	8002986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001878:	200d      	movs	r0, #13
 800187a:	f001 f8a0 	bl	80029be <HAL_NVIC_EnableIRQ>

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <MX_GPIO_Init+0xac>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a24      	ldr	r2, [pc, #144]	; (8001938 <MX_GPIO_Init+0xac>)
 80018a6:	f043 0320 	orr.w	r3, r3, #32
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <MX_GPIO_Init+0xac>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_GPIO_Init+0xac>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <MX_GPIO_Init+0xac>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_GPIO_Init+0xac>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <MX_GPIO_Init+0xac>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a18      	ldr	r2, [pc, #96]	; (8001938 <MX_GPIO_Init+0xac>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_GPIO_Init+0xac>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f241 4103 	movw	r1, #5123	; 0x1403
 80018ee:	4813      	ldr	r0, [pc, #76]	; (800193c <MX_GPIO_Init+0xb0>)
 80018f0:	f001 fbf2 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 80018f4:	f240 4303 	movw	r3, #1027	; 0x403
 80018f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 0310 	add.w	r3, r7, #16
 800190a:	4619      	mov	r1, r3
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <MX_GPIO_Init+0xb0>)
 800190e:	f001 fa5f 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_GPIO_Init+0xb0>)
 800192c:	f001 fa50 	bl	8002dd0 <HAL_GPIO_Init>

}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	40010c00 	.word	0x40010c00

08001940 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	adcVal = HAL_ADC_GetValue(hadc1);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fcd1 	bl	80022f0 <HAL_ADC_GetValue>
 800194e:	4603      	mov	r3, r0
 8001950:	4a02      	ldr	r2, [pc, #8]	; (800195c <HAL_ADC_ConvCpltCallback+0x1c>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200001e0 	.word	0x200001e0

08001960 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d103      	bne.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		screenFlag = 1;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e017      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x48>
	}

	else if(htim == &htim4)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d112      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		counter = counter + 1;	//increment the counter once every 1/100th of a second
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001988:	6013      	str	r3, [r2, #0]
		if(counter > 500)
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001992:	d909      	bls.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			msgLength = sprintf(msg, "N/A");
 8001994:	490a      	ldr	r1, [pc, #40]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001996:	480b      	ldr	r0, [pc, #44]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001998:	f003 f93e 	bl	8004c18 <siprintf>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e000      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x48>
		}
	}

	else
	{
		return;
 80019a6:	bf00      	nop
	}
}
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000011c 	.word	0x2000011c
 80019b4:	200002d8 	.word	0x200002d8
 80019b8:	200000a0 	.word	0x200000a0
 80019bc:	200001dc 	.word	0x200001dc
 80019c0:	080054b0 	.word	0x080054b0
 80019c4:	200000e8 	.word	0x200000e8
 80019c8:	20000164 	.word	0x20000164

080019cc <updateBPM>:

void updateBPM(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	float intermediateValue;
	uint16_t bpm;

	intermediateValue = 1.0f/(counter/6000.0f);
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <updateBPM+0x58>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fc6e 	bl	80002b8 <__aeabi_ui2f>
 80019dc:	4603      	mov	r3, r0
 80019de:	4912      	ldr	r1, [pc, #72]	; (8001a28 <updateBPM+0x5c>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd75 	bl	80004d0 <__aeabi_fdiv>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80019ee:	f7fe fd6f 	bl	80004d0 <__aeabi_fdiv>
 80019f2:	4603      	mov	r3, r0
 80019f4:	607b      	str	r3, [r7, #4]
	bpm = (uint16_t)intermediateValue;
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fe06 	bl	8000608 <__aeabi_f2uiz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	807b      	strh	r3, [r7, #2]

	msgLength = sprintf(msg, "%u", bpm);
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	461a      	mov	r2, r3
 8001a04:	4909      	ldr	r1, [pc, #36]	; (8001a2c <updateBPM+0x60>)
 8001a06:	480a      	ldr	r0, [pc, #40]	; (8001a30 <updateBPM+0x64>)
 8001a08:	f003 f906 	bl	8004c18 <siprintf>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <updateBPM+0x68>)
 8001a12:	601a      	str	r2, [r3, #0]
	counter = 0;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <updateBPM+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200001dc 	.word	0x200001dc
 8001a28:	45bb8000 	.word	0x45bb8000
 8001a2c:	080054b4 	.word	0x080054b4
 8001a30:	200000e8 	.word	0x200000e8
 8001a34:	20000164 	.word	0x20000164

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>
	...

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_MspInit+0x60>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_MspInit+0x60>)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_ADC_MspInit+0x7c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d129      	bne.n	8001b1c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001af8:	2302      	movs	r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afc:	2303      	movs	r3, #3
 8001afe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4619      	mov	r1, r3
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <HAL_ADC_MspInit+0x84>)
 8001b08:	f001 f962 	bl	8002dd0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2012      	movs	r0, #18
 8001b12:	f000 ff38 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b16:	2012      	movs	r0, #18
 8001b18:	f000 ff51 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40012400 	.word	0x40012400
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010800 	.word	0x40010800

08001b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_SPI_MspInit+0xbc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d149      	bne.n	8001be4 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_SPI_MspInit+0xc0>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_SPI_MspInit+0xc0>)
 8001b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_SPI_MspInit+0xc0>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_SPI_MspInit+0xc0>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <HAL_SPI_MspInit+0xc0>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_SPI_MspInit+0xc0>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b80:	23a0      	movs	r3, #160	; 0xa0
 8001b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4619      	mov	r1, r3
 8001b92:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <HAL_SPI_MspInit+0xc4>)
 8001b94:	f001 f91c 	bl	8002dd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001b9a:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <HAL_SPI_MspInit+0xcc>)
 8001b9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001bca:	f000 ff13 	bl	80029f4 <HAL_DMA_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001bd4:	f7ff ff30 	bl	8001a38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001bdc:	649a      	str	r2, [r3, #72]	; 0x48
 8001bde:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_SPI_MspInit+0xc8>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40013000 	.word	0x40013000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	20000294 	.word	0x20000294
 8001bfc:	40020030 	.word	0x40020030

08001c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d114      	bne.n	8001c3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a25      	ldr	r2, [pc, #148]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	201c      	movs	r0, #28
 8001c30:	f000 fea9 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c34:	201c      	movs	r0, #28
 8001c36:	f000 fec2 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c3a:	e032      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d114      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	201d      	movs	r0, #29
 8001c64:	f000 fe8f 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c68:	201d      	movs	r0, #29
 8001c6a:	f000 fea8 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 8001c6e:	e018      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d113      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	201e      	movs	r0, #30
 8001c98:	f000 fe75 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c9c:	201e      	movs	r0, #30
 8001c9e:	f000 fe8e 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_UART_MspInit+0x8c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d131      	bne.n	8001d3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_UART_MspInit+0x90>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_UART_MspInit+0x90>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_UART_MspInit+0x90>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_UART_MspInit+0x90>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_UART_MspInit+0x90>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_UART_MspInit+0x90>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480b      	ldr	r0, [pc, #44]	; (8001d4c <HAL_UART_MspInit+0x94>)
 8001d1e:	f001 f857 	bl	8002dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4619      	mov	r1, r3
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <HAL_UART_MspInit+0x94>)
 8001d38:	f001 f84a 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010800 	.word	0x40010800

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <NMI_Handler+0x4>

08001d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <HardFault_Handler+0x4>

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <MemManage_Handler+0x4>

08001d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <BusFault_Handler+0x4>

08001d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <UsageFault_Handler+0x4>

08001d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d96:	f000 f8dd 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <DMA1_Channel3_IRQHandler+0x10>)
 8001da6:	f000 fedf 	bl	8002b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000294 	.word	0x20000294

08001db4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <ADC1_2_IRQHandler+0x10>)
 8001dba:	f000 faa5 	bl	8002308 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000168 	.word	0x20000168

08001dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <TIM2_IRQHandler+0x10>)
 8001dce:	f002 fabd 	bl	800434c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000024c 	.word	0x2000024c

08001ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <TIM3_IRQHandler+0x10>)
 8001de2:	f002 fab3 	bl	800434c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000011c 	.word	0x2000011c

08001df0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <TIM4_IRQHandler+0x10>)
 8001df6:	f002 faa9 	bl	800434c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200000a0 	.word	0x200000a0

08001e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <_sbrk+0x5c>)
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <_sbrk+0x60>)
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_sbrk+0x64>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <_sbrk+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d207      	bcs.n	8001e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e34:	f002 febe 	bl	8004bb4 <__errno>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	e009      	b.n	8001e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <_sbrk+0x64>)
 8001e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20005000 	.word	0x20005000
 8001e64:	00000400 	.word	0x00000400
 8001e68:	20000094 	.word	0x20000094
 8001e6c:	200002f0 	.word	0x200002f0

08001e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e7e:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e94:	4c0a      	ldr	r4, [pc, #40]	; (8001ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f7ff ffe5 	bl	8001e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f002 fe8b 	bl	8004bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eaa:	f7ff fa2d 	bl	8001308 <main>
  bx lr
 8001eae:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001eb8:	08005e80 	.word	0x08005e80
  ldr r2, =_sbss
 8001ebc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ec0:	200002f0 	.word	0x200002f0

08001ec4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <CAN1_RX1_IRQHandler>
	...

08001ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_Init+0x28>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_Init+0x28>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 fd49 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	200f      	movs	r0, #15
 8001ee0:	f000 f808 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fdae 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x54>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fd61 	bl	80029da <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f000 fd29 	bl	8002986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_InitTick+0x5c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20000010 	.word	0x20000010
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_IncTick+0x1c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_IncTick+0x20>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_IncTick+0x20>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000010 	.word	0x20000010
 8001f74:	200002dc 	.word	0x200002dc

08001f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_GetTick+0x10>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	200002dc 	.word	0x200002dc

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffe0 	bl	8001f78 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000010 	.word	0x20000010

08001fd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0be      	b.n	8002174 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fd48 	bl	8001aa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fb93 	bl	8002744 <ADC_ConversionStop_Disable>
 800201e:	4603      	mov	r3, r0
 8002020:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 8099 	bne.w	8002162 <HAL_ADC_Init+0x18e>
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8095 	bne.w	8002162 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002040:	f023 0302 	bic.w	r3, r3, #2
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002054:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7b1b      	ldrb	r3, [r3, #12]
 800205a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800205c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4313      	orrs	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206c:	d003      	beq.n	8002076 <HAL_ADC_Init+0xa2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_ADC_Init+0xa8>
 8002076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207a:	e000      	b.n	800207e <HAL_ADC_Init+0xaa>
 800207c:	2300      	movs	r3, #0
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7d1b      	ldrb	r3, [r3, #20]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d119      	bne.n	80020c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7b1b      	ldrb	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	3b01      	subs	r3, #1
 800209a:	035a      	lsls	r2, r3, #13
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e00b      	b.n	80020c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_ADC_Init+0x1a8>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f0:	d003      	beq.n	80020fa <HAL_ADC_Init+0x126>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d104      	bne.n	8002104 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	3b01      	subs	r3, #1
 8002100:	051b      	lsls	r3, r3, #20
 8002102:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	430a      	orrs	r2, r1
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_ADC_Init+0x1ac>)
 8002120:	4013      	ands	r3, r2
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d10b      	bne.n	8002140 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800213e:	e018      	b.n	8002172 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f023 0312 	bic.w	r3, r3, #18
 8002148:	f043 0210 	orr.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002160:	e007      	b.n	8002172 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	ffe1f7fd 	.word	0xffe1f7fd
 8002180:	ff1f0efe 	.word	0xff1f0efe

08002184 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_ADC_Start_IT+0x1a>
 800219a:	2302      	movs	r3, #2
 800219c:	e0a0      	b.n	80022e0 <HAL_ADC_Start_IT+0x15c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fa72 	bl	8002690 <ADC_Enable>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 808f 	bne.w	80022d6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <HAL_ADC_Start_IT+0x164>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_Start_IT+0x5e>
 80021d6:	4b45      	ldr	r3, [pc, #276]	; (80022ec <HAL_ADC_Start_IT+0x168>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d026      	beq.n	800224a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002204:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800220c:	e01d      	b.n	800224a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a33      	ldr	r2, [pc, #204]	; (80022ec <HAL_ADC_Start_IT+0x168>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d004      	beq.n	800222e <HAL_ADC_Start_IT+0xaa>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2f      	ldr	r2, [pc, #188]	; (80022e8 <HAL_ADC_Start_IT+0x164>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10d      	bne.n	800224a <HAL_ADC_Start_IT+0xc6>
 800222e:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_ADC_Start_IT+0x168>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002242:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	f023 0206 	bic.w	r2, r3, #6
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
 8002262:	e002      	b.n	800226a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f06f 0202 	mvn.w	r2, #2
 800227a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002296:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800229a:	d113      	bne.n	80022c4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_ADC_Start_IT+0x164>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d105      	bne.n	80022b2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_ADC_Start_IT+0x168>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	e00c      	b.n	80022de <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e003      	b.n	80022de <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40012800 	.word	0x40012800
 80022ec:	40012400 	.word	0x40012400

080022f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d140      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d139      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800234e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002352:	d11d      	bne.n	8002390 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002358:	2b00      	cmp	r3, #0
 800235a:	d119      	bne.n	8002390 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0220 	bic.w	r2, r2, #32
 800236a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fad5 	bl	8001940 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f06f 0212 	mvn.w	r2, #18
 800239e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d14f      	bne.n	800244e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d148      	bne.n	800244e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80023de:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80023e2:	d012      	beq.n	800240a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d125      	bne.n	800243e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002400:	d11d      	bne.n	800243e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002418:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9c1 	bl	80027c6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 020c 	mvn.w	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d114      	bne.n	8002486 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10d      	bne.n	8002486 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f809 	bl	800248e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0201 	mvn.w	r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x20>
 80024bc:	2302      	movs	r3, #2
 80024be:	e0dc      	b.n	800267a <HAL_ADC_ConfigChannel+0x1da>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d81c      	bhi.n	800250a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3b05      	subs	r3, #5
 80024e2:	221f      	movs	r2, #31
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4019      	ands	r1, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b05      	subs	r3, #5
 80024fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	; 0x34
 8002508:	e03c      	b.n	8002584 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d81c      	bhi.n	800254c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	3b23      	subs	r3, #35	; 0x23
 8002524:	221f      	movs	r2, #31
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	4019      	ands	r1, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b23      	subs	r3, #35	; 0x23
 800253e:	fa00 f203 	lsl.w	r2, r0, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
 800254a:	e01b      	b.n	8002584 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b41      	subs	r3, #65	; 0x41
 800255e:	221f      	movs	r2, #31
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	4019      	ands	r1, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	3b41      	subs	r3, #65	; 0x41
 8002578:	fa00 f203 	lsl.w	r2, r0, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b09      	cmp	r3, #9
 800258a:	d91c      	bls.n	80025c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	3b1e      	subs	r3, #30
 800259e:	2207      	movs	r2, #7
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6898      	ldr	r0, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	3b1e      	subs	r3, #30
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	e019      	b.n	80025fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6919      	ldr	r1, [r3, #16]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	4019      	ands	r1, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6898      	ldr	r0, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d003      	beq.n	800260a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002606:	2b11      	cmp	r3, #17
 8002608:	d132      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <HAL_ADC_ConfigChannel+0x1e4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d125      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d126      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002630:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d11a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_ADC_ConfigChannel+0x1e8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a13      	ldr	r2, [pc, #76]	; (800268c <HAL_ADC_ConfigChannel+0x1ec>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9a      	lsrs	r2, r3, #18
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002650:	e002      	b.n	8002658 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3b01      	subs	r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f9      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x1b2>
 800265e:	e007      	b.n	8002670 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	f043 0220 	orr.w	r2, r3, #32
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	40012400 	.word	0x40012400
 8002688:	20000008 	.word	0x20000008
 800268c:	431bde83 	.word	0x431bde83

08002690 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d040      	beq.n	8002730 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <ADC_Enable+0xac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <ADC_Enable+0xb0>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9b      	lsrs	r3, r3, #18
 80026ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026cc:	e002      	b.n	80026d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026da:	f7ff fc4d 	bl	8001f78 <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026e0:	e01f      	b.n	8002722 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e2:	f7ff fc49 	bl	8001f78 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d918      	bls.n	8002722 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d011      	beq.n	8002722 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e007      	b.n	8002732 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d1d8      	bne.n	80026e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	431bde83 	.word	0x431bde83

08002744 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d12e      	bne.n	80027bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800276e:	f7ff fc03 	bl	8001f78 <HAL_GetTick>
 8002772:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002774:	e01b      	b.n	80027ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002776:	f7ff fbff 	bl	8001f78 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d914      	bls.n	80027ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10d      	bne.n	80027ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	f043 0210 	orr.w	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e007      	b.n	80027be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d0dc      	beq.n	8002776 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <__NVIC_SetPriorityGrouping+0x44>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f4:	4013      	ands	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <__NVIC_SetPriorityGrouping+0x44>)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	60d3      	str	r3, [r2, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <__NVIC_GetPriorityGrouping+0x18>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	f003 0307 	and.w	r3, r3, #7
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	2b00      	cmp	r3, #0
 800284c:	db0b      	blt.n	8002866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4906      	ldr	r1, [pc, #24]	; (8002870 <__NVIC_EnableIRQ+0x34>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2001      	movs	r0, #1
 800285e:	fa00 f202 	lsl.w	r2, r0, r2
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	; (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293c:	d301      	bcc.n	8002942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <SysTick_Config+0x40>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294a:	210f      	movs	r1, #15
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f7ff ff90 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <SysTick_Config+0x40>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <SysTick_Config+0x40>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff2d 	bl	80027d8 <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff42 	bl	8002820 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff90 	bl	80028c8 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5f 	bl	8002874 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff35 	bl	800283c <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffa2 	bl	800292c <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e043      	b.n	8002a92 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_DMA_Init+0xa8>)
 8002a12:	4413      	add	r3, r2
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_DMA_Init+0xac>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	009a      	lsls	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <HAL_DMA_Init+0xb0>)
 8002a26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	bffdfff8 	.word	0xbffdfff8
 8002aa0:	cccccccd 	.word	0xcccccccd
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA_Start_IT+0x20>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e04a      	b.n	8002b5e <HAL_DMA_Start_IT+0xb6>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d13a      	bne.n	8002b50 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f938 	bl	8002d74 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 020e 	orr.w	r2, r2, #14
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e00f      	b.n	8002b3e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0204 	bic.w	r2, r2, #4
 8002b2c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 020a 	orr.w	r2, r2, #10
 8002b3c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e005      	b.n	8002b5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	2204      	movs	r2, #4
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d04f      	beq.n	8002c30 <HAL_DMA_IRQHandler+0xc8>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d04a      	beq.n	8002c30 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d107      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0204 	bic.w	r2, r2, #4
 8002bb6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a66      	ldr	r2, [pc, #408]	; (8002d58 <HAL_DMA_IRQHandler+0x1f0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d029      	beq.n	8002c16 <HAL_DMA_IRQHandler+0xae>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a65      	ldr	r2, [pc, #404]	; (8002d5c <HAL_DMA_IRQHandler+0x1f4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xaa>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a63      	ldr	r2, [pc, #396]	; (8002d60 <HAL_DMA_IRQHandler+0x1f8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01a      	beq.n	8002c0c <HAL_DMA_IRQHandler+0xa4>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a62      	ldr	r2, [pc, #392]	; (8002d64 <HAL_DMA_IRQHandler+0x1fc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d012      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x9e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a60      	ldr	r2, [pc, #384]	; (8002d68 <HAL_DMA_IRQHandler+0x200>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00a      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x98>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5f      	ldr	r2, [pc, #380]	; (8002d6c <HAL_DMA_IRQHandler+0x204>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d102      	bne.n	8002bfa <HAL_DMA_IRQHandler+0x92>
 8002bf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bf8:	e00e      	b.n	8002c18 <HAL_DMA_IRQHandler+0xb0>
 8002bfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bfe:	e00b      	b.n	8002c18 <HAL_DMA_IRQHandler+0xb0>
 8002c00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c04:	e008      	b.n	8002c18 <HAL_DMA_IRQHandler+0xb0>
 8002c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c0a:	e005      	b.n	8002c18 <HAL_DMA_IRQHandler+0xb0>
 8002c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c10:	e002      	b.n	8002c18 <HAL_DMA_IRQHandler+0xb0>
 8002c12:	2340      	movs	r3, #64	; 0x40
 8002c14:	e000      	b.n	8002c18 <HAL_DMA_IRQHandler+0xb0>
 8002c16:	2304      	movs	r3, #4
 8002c18:	4a55      	ldr	r2, [pc, #340]	; (8002d70 <HAL_DMA_IRQHandler+0x208>)
 8002c1a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8094 	beq.w	8002d4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c2e:	e08e      	b.n	8002d4e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2202      	movs	r2, #2
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d056      	beq.n	8002cee <HAL_DMA_IRQHandler+0x186>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d051      	beq.n	8002cee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 020a 	bic.w	r2, r2, #10
 8002c66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a38      	ldr	r2, [pc, #224]	; (8002d58 <HAL_DMA_IRQHandler+0x1f0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d029      	beq.n	8002cce <HAL_DMA_IRQHandler+0x166>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <HAL_DMA_IRQHandler+0x1f4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_IRQHandler+0x162>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a35      	ldr	r2, [pc, #212]	; (8002d60 <HAL_DMA_IRQHandler+0x1f8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x15c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <HAL_DMA_IRQHandler+0x1fc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d012      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x156>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a32      	ldr	r2, [pc, #200]	; (8002d68 <HAL_DMA_IRQHandler+0x200>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x150>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a31      	ldr	r2, [pc, #196]	; (8002d6c <HAL_DMA_IRQHandler+0x204>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d102      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x14a>
 8002cac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cb0:	e00e      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x168>
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb6:	e00b      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x168>
 8002cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cbc:	e008      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x168>
 8002cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc2:	e005      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x168>
 8002cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc8:	e002      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x168>
 8002cca:	2320      	movs	r3, #32
 8002ccc:	e000      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x168>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <HAL_DMA_IRQHandler+0x208>)
 8002cd2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d034      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cec:	e02f      	b.n	8002d4e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d028      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x1e8>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d023      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 020e 	bic.w	r2, r2, #14
 8002d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f202 	lsl.w	r2, r1, r2
 8002d26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
    }
  }
  return;
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
}
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40020008 	.word	0x40020008
 8002d5c:	4002001c 	.word	0x4002001c
 8002d60:	40020030 	.word	0x40020030
 8002d64:	40020044 	.word	0x40020044
 8002d68:	40020058 	.word	0x40020058
 8002d6c:	4002006c 	.word	0x4002006c
 8002d70:	40020000 	.word	0x40020000

08002d74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d108      	bne.n	8002db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002db2:	e007      	b.n	8002dc4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
	...

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b08b      	sub	sp, #44	; 0x2c
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	e169      	b.n	80030b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002de4:	2201      	movs	r2, #1
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8158 	bne.w	80030b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a9a      	ldr	r2, [pc, #616]	; (8003070 <HAL_GPIO_Init+0x2a0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d05e      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e0c:	4a98      	ldr	r2, [pc, #608]	; (8003070 <HAL_GPIO_Init+0x2a0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d875      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e12:	4a98      	ldr	r2, [pc, #608]	; (8003074 <HAL_GPIO_Init+0x2a4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d058      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e18:	4a96      	ldr	r2, [pc, #600]	; (8003074 <HAL_GPIO_Init+0x2a4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d86f      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e1e:	4a96      	ldr	r2, [pc, #600]	; (8003078 <HAL_GPIO_Init+0x2a8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d052      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e24:	4a94      	ldr	r2, [pc, #592]	; (8003078 <HAL_GPIO_Init+0x2a8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d869      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e2a:	4a94      	ldr	r2, [pc, #592]	; (800307c <HAL_GPIO_Init+0x2ac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d04c      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e30:	4a92      	ldr	r2, [pc, #584]	; (800307c <HAL_GPIO_Init+0x2ac>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d863      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e36:	4a92      	ldr	r2, [pc, #584]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d046      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e3c:	4a90      	ldr	r2, [pc, #576]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d85d      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e42:	2b12      	cmp	r3, #18
 8002e44:	d82a      	bhi.n	8002e9c <HAL_GPIO_Init+0xcc>
 8002e46:	2b12      	cmp	r3, #18
 8002e48:	d859      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_GPIO_Init+0x80>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002ecb 	.word	0x08002ecb
 8002e54:	08002ea5 	.word	0x08002ea5
 8002e58:	08002eb7 	.word	0x08002eb7
 8002e5c:	08002ef9 	.word	0x08002ef9
 8002e60:	08002eff 	.word	0x08002eff
 8002e64:	08002eff 	.word	0x08002eff
 8002e68:	08002eff 	.word	0x08002eff
 8002e6c:	08002eff 	.word	0x08002eff
 8002e70:	08002eff 	.word	0x08002eff
 8002e74:	08002eff 	.word	0x08002eff
 8002e78:	08002eff 	.word	0x08002eff
 8002e7c:	08002eff 	.word	0x08002eff
 8002e80:	08002eff 	.word	0x08002eff
 8002e84:	08002eff 	.word	0x08002eff
 8002e88:	08002eff 	.word	0x08002eff
 8002e8c:	08002eff 	.word	0x08002eff
 8002e90:	08002eff 	.word	0x08002eff
 8002e94:	08002ead 	.word	0x08002ead
 8002e98:	08002ec1 	.word	0x08002ec1
 8002e9c:	4a79      	ldr	r2, [pc, #484]	; (8003084 <HAL_GPIO_Init+0x2b4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ea2:	e02c      	b.n	8002efe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	623b      	str	r3, [r7, #32]
          break;
 8002eaa:	e029      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	623b      	str	r3, [r7, #32]
          break;
 8002eb4:	e024      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	3308      	adds	r3, #8
 8002ebc:	623b      	str	r3, [r7, #32]
          break;
 8002ebe:	e01f      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	623b      	str	r3, [r7, #32]
          break;
 8002ec8:	e01a      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	623b      	str	r3, [r7, #32]
          break;
 8002ed6:	e013      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	611a      	str	r2, [r3, #16]
          break;
 8002eea:	e009      	b.n	8002f00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eec:	2308      	movs	r3, #8
 8002eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	615a      	str	r2, [r3, #20]
          break;
 8002ef6:	e003      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	623b      	str	r3, [r7, #32]
          break;
 8002efc:	e000      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          break;
 8002efe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2bff      	cmp	r3, #255	; 0xff
 8002f04:	d801      	bhi.n	8002f0a <HAL_GPIO_Init+0x13a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	e001      	b.n	8002f0e <HAL_GPIO_Init+0x13e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d802      	bhi.n	8002f1c <HAL_GPIO_Init+0x14c>
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	e002      	b.n	8002f22 <HAL_GPIO_Init+0x152>
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	3b08      	subs	r3, #8
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	210f      	movs	r1, #15
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80b1 	beq.w	80030b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f50:	4b4d      	ldr	r3, [pc, #308]	; (8003088 <HAL_GPIO_Init+0x2b8>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	4a4c      	ldr	r2, [pc, #304]	; (8003088 <HAL_GPIO_Init+0x2b8>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6193      	str	r3, [r2, #24]
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <HAL_GPIO_Init+0x2b8>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f68:	4a48      	ldr	r2, [pc, #288]	; (800308c <HAL_GPIO_Init+0x2bc>)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	3302      	adds	r3, #2
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	220f      	movs	r2, #15
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a40      	ldr	r2, [pc, #256]	; (8003090 <HAL_GPIO_Init+0x2c0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_GPIO_Init+0x1ec>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3f      	ldr	r2, [pc, #252]	; (8003094 <HAL_GPIO_Init+0x2c4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_GPIO_Init+0x1e8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a3e      	ldr	r2, [pc, #248]	; (8003098 <HAL_GPIO_Init+0x2c8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d007      	beq.n	8002fb4 <HAL_GPIO_Init+0x1e4>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a3d      	ldr	r2, [pc, #244]	; (800309c <HAL_GPIO_Init+0x2cc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_GPIO_Init+0x1e0>
 8002fac:	2303      	movs	r3, #3
 8002fae:	e006      	b.n	8002fbe <HAL_GPIO_Init+0x1ee>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	e004      	b.n	8002fbe <HAL_GPIO_Init+0x1ee>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e002      	b.n	8002fbe <HAL_GPIO_Init+0x1ee>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_GPIO_Init+0x1ee>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc0:	f002 0203 	and.w	r2, r2, #3
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	4093      	lsls	r3, r2
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fce:	492f      	ldr	r1, [pc, #188]	; (800308c <HAL_GPIO_Init+0x2bc>)
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d006      	beq.n	8002ff6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fe8:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	492c      	ldr	r1, [pc, #176]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]
 8002ff4:	e006      	b.n	8003004 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	4928      	ldr	r1, [pc, #160]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003000:	4013      	ands	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4922      	ldr	r1, [pc, #136]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
 800301c:	e006      	b.n	800302c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	43db      	mvns	r3, r3
 8003026:	491e      	ldr	r1, [pc, #120]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003028:	4013      	ands	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4918      	ldr	r1, [pc, #96]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	43db      	mvns	r3, r3
 800304e:	4914      	ldr	r1, [pc, #80]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003050:	4013      	ands	r3, r2
 8003052:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d021      	beq.n	80030a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	490e      	ldr	r1, [pc, #56]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
 800306c:	e021      	b.n	80030b2 <HAL_GPIO_Init+0x2e2>
 800306e:	bf00      	nop
 8003070:	10320000 	.word	0x10320000
 8003074:	10310000 	.word	0x10310000
 8003078:	10220000 	.word	0x10220000
 800307c:	10210000 	.word	0x10210000
 8003080:	10120000 	.word	0x10120000
 8003084:	10110000 	.word	0x10110000
 8003088:	40021000 	.word	0x40021000
 800308c:	40010000 	.word	0x40010000
 8003090:	40010800 	.word	0x40010800
 8003094:	40010c00 	.word	0x40010c00
 8003098:	40011000 	.word	0x40011000
 800309c:	40011400 	.word	0x40011400
 80030a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_GPIO_Init+0x304>)
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	4909      	ldr	r1, [pc, #36]	; (80030d4 <HAL_GPIO_Init+0x304>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	3301      	adds	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f47f ae8e 	bne.w	8002de4 <HAL_GPIO_Init+0x14>
  }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	372c      	adds	r7, #44	; 0x2c
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	40010400 	.word	0x40010400

080030d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
 80030e4:	4613      	mov	r3, r2
 80030e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030e8:	787b      	ldrb	r3, [r7, #1]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030f4:	e003      	b.n	80030fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	041a      	lsls	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e26c      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8087 	beq.w	8003236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003128:	4b92      	ldr	r3, [pc, #584]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b04      	cmp	r3, #4
 8003132:	d00c      	beq.n	800314e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003134:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d112      	bne.n	8003166 <HAL_RCC_OscConfig+0x5e>
 8003140:	4b8c      	ldr	r3, [pc, #560]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	4b89      	ldr	r3, [pc, #548]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06c      	beq.n	8003234 <HAL_RCC_OscConfig+0x12c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d168      	bne.n	8003234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e246      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x76>
 8003170:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a7f      	ldr	r2, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e02e      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x98>
 8003186:	4b7b      	ldr	r3, [pc, #492]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7a      	ldr	r2, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b78      	ldr	r3, [pc, #480]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a77      	ldr	r2, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xbc>
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a71      	ldr	r2, [pc, #452]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6e      	ldr	r2, [pc, #440]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 80031c4:	4b6b      	ldr	r3, [pc, #428]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6a      	ldr	r2, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b68      	ldr	r3, [pc, #416]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a67      	ldr	r2, [pc, #412]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fe fec8 	bl	8001f78 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fec4 	bl	8001f78 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1fa      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b5d      	ldr	r3, [pc, #372]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xe4>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe feb4 	bl	8001f78 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe feb0 	bl	8001f78 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1e6      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x10c>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d063      	beq.n	800330a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003242:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800324e:	4b49      	ldr	r3, [pc, #292]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x18c>
 800325a:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x176>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1ba      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4939      	ldr	r1, [pc, #228]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e03a      	b.n	800330a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_RCC_OscConfig+0x270>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fe fe69 	bl	8001f78 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe fe65 	bl	8001f78 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e19b      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4927      	ldr	r1, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
 80032dc:	e015      	b.n	800330a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <HAL_RCC_OscConfig+0x270>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fe48 	bl	8001f78 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fe fe44 	bl	8001f78 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e17a      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d03a      	beq.n	800338c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d019      	beq.n	8003352 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <HAL_RCC_OscConfig+0x274>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003324:	f7fe fe28 	bl	8001f78 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fe24 	bl	8001f78 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e15a      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800334a:	2001      	movs	r0, #1
 800334c:	f000 fad8 	bl	8003900 <RCC_Delay>
 8003350:	e01c      	b.n	800338c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_RCC_OscConfig+0x274>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003358:	f7fe fe0e 	bl	8001f78 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335e:	e00f      	b.n	8003380 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7fe fe0a 	bl	8001f78 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d908      	bls.n	8003380 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e140      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	42420000 	.word	0x42420000
 800337c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b9e      	ldr	r3, [pc, #632]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e9      	bne.n	8003360 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80a6 	beq.w	80034e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b97      	ldr	r3, [pc, #604]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	4b94      	ldr	r3, [pc, #592]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4a93      	ldr	r2, [pc, #588]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b4:	61d3      	str	r3, [r2, #28]
 80033b6:	4b91      	ldr	r3, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_RCC_OscConfig+0x4f8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d118      	bne.n	8003404 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d2:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a8a      	ldr	r2, [pc, #552]	; (8003600 <HAL_RCC_OscConfig+0x4f8>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033de:	f7fe fdcb 	bl	8001f78 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e6:	f7fe fdc7 	bl	8001f78 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b64      	cmp	r3, #100	; 0x64
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0fd      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x4f8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x312>
 800340c:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a7a      	ldr	r2, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	e02d      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x334>
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a75      	ldr	r2, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	4b73      	ldr	r3, [pc, #460]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a72      	ldr	r2, [pc, #456]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	e01c      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d10c      	bne.n	800345e <HAL_RCC_OscConfig+0x356>
 8003444:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a6c      	ldr	r2, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a69      	ldr	r2, [pc, #420]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6213      	str	r3, [r2, #32]
 800345c:	e00b      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800345e:	4b67      	ldr	r3, [pc, #412]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a66      	ldr	r2, [pc, #408]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6213      	str	r3, [r2, #32]
 800346a:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d015      	beq.n	80034aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe fd7b 	bl	8001f78 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fd77 	bl	8001f78 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0ab      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ee      	beq.n	8003486 <HAL_RCC_OscConfig+0x37e>
 80034a8:	e014      	b.n	80034d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fe fd65 	bl	8001f78 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fe fd61 	bl	8001f78 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e095      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ee      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4b48      	ldr	r3, [pc, #288]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4a47      	ldr	r2, [pc, #284]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8081 	beq.w	80035f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f0:	4b42      	ldr	r3, [pc, #264]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d061      	beq.n	80035c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d146      	bne.n	8003592 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003504:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_OscConfig+0x4fc>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fe fd35 	bl	8001f78 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fd31 	bl	8001f78 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e067      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003524:	4b35      	ldr	r3, [pc, #212]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d108      	bne.n	800354c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800353a:	4b30      	ldr	r3, [pc, #192]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	492d      	ldr	r1, [pc, #180]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a19      	ldr	r1, [r3, #32]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	430b      	orrs	r3, r1
 800355e:	4927      	ldr	r1, [pc, #156]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x4fc>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fd05 	bl	8001f78 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fd01 	bl	8001f78 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e037      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x46a>
 8003590:	e02f      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_RCC_OscConfig+0x4fc>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fcee 	bl	8001f78 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe fcea 	bl	8001f78 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e020      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x498>
 80035be:	e018      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e013      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	40007000 	.word	0x40007000
 8003604:	42420060 	.word	0x42420060

08003608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d0      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b6a      	ldr	r3, [pc, #424]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d910      	bls.n	800364c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b67      	ldr	r3, [pc, #412]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	4965      	ldr	r1, [pc, #404]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0b8      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800366e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a52      	ldr	r2, [pc, #328]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003686:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b50      	ldr	r3, [pc, #320]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	494d      	ldr	r1, [pc, #308]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d040      	beq.n	8003728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d115      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e073      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06b      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4936      	ldr	r1, [pc, #216]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fc3e 	bl	8001f78 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fe fc3a 	bl	8001f78 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e053      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d210      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4922      	ldr	r1, [pc, #136]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e032      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4916      	ldr	r1, [pc, #88]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	490e      	ldr	r1, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003796:	f000 f821 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 800379a:	4602      	mov	r2, r0
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	490a      	ldr	r1, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1cc>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1d0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fb9c 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40022000 	.word	0x40022000
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08005e2c 	.word	0x08005e2c
 80037d4:	20000008 	.word	0x20000008
 80037d8:	2000000c 	.word	0x2000000c

080037dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	b490      	push	{r4, r7}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_RCC_GetSysClockFreq+0xb0>)
 80037e4:	1d3c      	adds	r4, r7, #4
 80037e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037ec:	f240 2301 	movw	r3, #513	; 0x201
 80037f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003806:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b04      	cmp	r3, #4
 8003814:	d002      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x40>
 8003816:	2b08      	cmp	r3, #8
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x46>
 800381a:	e02d      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800381e:	623b      	str	r3, [r7, #32]
      break;
 8003820:	e02d      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	0c9b      	lsrs	r3, r3, #18
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800382e:	4413      	add	r3, r2
 8003830:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003834:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003840:	4b13      	ldr	r3, [pc, #76]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0c5b      	lsrs	r3, r3, #17
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800384e:	4413      	add	r3, r2
 8003850:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003854:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800385a:	fb02 f203 	mul.w	r2, r2, r3
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e004      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	623b      	str	r3, [r7, #32]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800387a:	623b      	str	r3, [r7, #32]
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	6a3b      	ldr	r3, [r7, #32]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bc90      	pop	{r4, r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	080054b8 	.word	0x080054b8
 8003890:	40021000 	.word	0x40021000
 8003894:	007a1200 	.word	0x007a1200
 8003898:	003d0900 	.word	0x003d0900

0800389c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <HAL_RCC_GetHCLKFreq+0x10>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	20000008 	.word	0x20000008

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff2 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08005e3c 	.word	0x08005e3c

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffde 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	0adb      	lsrs	r3, r3, #11
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08005e3c 	.word	0x08005e3c

08003900 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <RCC_Delay+0x34>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <RCC_Delay+0x38>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	0a5b      	lsrs	r3, r3, #9
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800391c:	bf00      	nop
  }
  while (Delay --);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1e5a      	subs	r2, r3, #1
 8003922:	60fa      	str	r2, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f9      	bne.n	800391c <RCC_Delay+0x1c>
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	20000008 	.word	0x20000008
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d07d      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395c:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10d      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	4a4b      	ldr	r2, [pc, #300]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003972:	61d3      	str	r3, [r2, #28]
 8003974:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d118      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003990:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a42      	ldr	r2, [pc, #264]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399c:	f7fe faec 	bl	8001f78 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	e008      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a4:	f7fe fae8 	bl	8001f78 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e06d      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d02e      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d027      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e0:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039f6:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d014      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fe fab7 	bl	8001f78 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe fab3 	bl	8001f78 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e036      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ee      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4917      	ldr	r1, [pc, #92]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	490b      	ldr	r1, [pc, #44]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4904      	ldr	r1, [pc, #16]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	42420440 	.word	0x42420440

08003aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e076      	b.n	8003ba8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d108      	bne.n	8003ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aca:	d009      	beq.n	8003ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61da      	str	r2, [r3, #28]
 8003ad2:	e005      	b.n	8003ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe f818 	bl	8001b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	ea42 0103 	orr.w	r1, r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	0c1a      	lsrs	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f002 0204 	and.w	r2, r2, #4
 8003b86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_SPI_Transmit+0x22>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e126      	b.n	8003e20 <HAL_SPI_Transmit+0x270>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bda:	f7fe f9cd 	bl	8001f78 <HAL_GetTick>
 8003bde:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d002      	beq.n	8003bf6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bf4:	e10b      	b.n	8003e0e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_SPI_Transmit+0x52>
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c06:	e102      	b.n	8003e0e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4e:	d10f      	bne.n	8003c70 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d007      	beq.n	8003c8e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c96:	d14b      	bne.n	8003d30 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_Transmit+0xf6>
 8003ca0:	8afb      	ldrh	r3, [r7, #22]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d13e      	bne.n	8003d24 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	881a      	ldrh	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	1c9a      	adds	r2, r3, #2
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cca:	e02b      	b.n	8003d24 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d112      	bne.n	8003d00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cfe:	e011      	b.n	8003d24 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d00:	f7fe f93a 	bl	8001f78 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d803      	bhi.n	8003d18 <HAL_SPI_Transmit+0x168>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_Transmit+0x16e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d22:	e074      	b.n	8003e0e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ce      	bne.n	8003ccc <HAL_SPI_Transmit+0x11c>
 8003d2e:	e04c      	b.n	8003dca <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_SPI_Transmit+0x18e>
 8003d38:	8afb      	ldrh	r3, [r7, #22]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d140      	bne.n	8003dc0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	7812      	ldrb	r2, [r2, #0]
 8003d4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d64:	e02c      	b.n	8003dc0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d113      	bne.n	8003d9c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d9a:	e011      	b.n	8003dc0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d9c:	f7fe f8ec 	bl	8001f78 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d803      	bhi.n	8003db4 <HAL_SPI_Transmit+0x204>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d102      	bne.n	8003dba <HAL_SPI_Transmit+0x20a>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dbe:	e026      	b.n	8003e0e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1cd      	bne.n	8003d66 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f9fc 	bl	80041cc <SPI_EndRxTxTransaction>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e000      	b.n	8003e0e <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_SPI_Transmit_DMA+0x20>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e09b      	b.n	8003f80 <HAL_SPI_Transmit_DMA+0x158>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d002      	beq.n	8003e62 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e60:	e089      	b.n	8003f76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_SPI_Transmit_DMA+0x46>
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e72:	e080      	b.n	8003f76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2203      	movs	r2, #3
 8003e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eba:	d10f      	bne.n	8003edc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee0:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <HAL_SPI_Transmit_DMA+0x160>)
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <HAL_SPI_Transmit_DMA+0x164>)
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <HAL_SPI_Transmit_DMA+0x168>)
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef8:	2200      	movs	r2, #0
 8003efa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	4619      	mov	r1, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f14:	f7fe fdc8 	bl	8002aa8 <HAL_DMA_Start_IT>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f043 0210 	orr.w	r2, r3, #16
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003f36:	e01e      	b.n	8003f76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d007      	beq.n	8003f56 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f54:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0220 	orr.w	r2, r2, #32
 8003f64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0202 	orr.w	r2, r2, #2
 8003f74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	0800405f 	.word	0x0800405f
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	0800407b 	.word	0x0800407b

08003f94 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc6:	f7fd ffd7 	bl	8001f78 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d03b      	beq.n	8004052 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0220 	bic.w	r2, r2, #32
 8003fe8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0202 	bic.w	r2, r2, #2
 8003ff8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	2164      	movs	r1, #100	; 0x64
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f000 f8e4 	bl	80041cc <SPI_EndRxTxTransaction>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2200      	movs	r2, #0
 8004038:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff ffab 	bl	8003fa6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004050:	e002      	b.n	8004058 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7fc fce6 	bl	8000a24 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff ff91 	bl	8003f94 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0203 	bic.w	r2, r2, #3
 8004096:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f043 0210 	orr.w	r2, r3, #16
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff ff7a 	bl	8003fa6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040cc:	f7fd ff54 	bl	8001f78 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	4413      	add	r3, r2
 80040da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040dc:	f7fd ff4c 	bl	8001f78 <HAL_GetTick>
 80040e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	015b      	lsls	r3, r3, #5
 80040e8:	0d1b      	lsrs	r3, r3, #20
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f2:	e054      	b.n	800419e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d050      	beq.n	800419e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040fc:	f7fd ff3c 	bl	8001f78 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	429a      	cmp	r2, r3
 800410a:	d902      	bls.n	8004112 <SPI_WaitFlagStateUntilTimeout+0x56>
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d13d      	bne.n	800418e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004120:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412a:	d111      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0x94>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004134:	d004      	beq.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413e:	d107      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004158:	d10f      	bne.n	800417a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004178:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e017      	b.n	80041be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	3b01      	subs	r3, #1
 800419c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d19b      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000008 	.word	0x20000008

080041cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff6a 	bl	80040bc <SPI_WaitFlagStateUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e000      	b.n	8004200 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e041      	b.n	800429e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd fce6 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 fa70 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d001      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e03a      	b.n	8004336 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_TIM_Base_Start_IT+0x98>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00e      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x58>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d009      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x58>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a14      	ldr	r2, [pc, #80]	; (8004344 <HAL_TIM_Base_Start_IT+0x9c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x58>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a13      	ldr	r2, [pc, #76]	; (8004348 <HAL_TIM_Base_Start_IT+0xa0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d111      	bne.n	8004324 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b06      	cmp	r3, #6
 8004310:	d010      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004322:	e007      	b.n	8004334 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800

0800434c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d122      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d11b      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0202 	mvn.w	r2, #2
 8004378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f9b1 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f9a4 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f9b3 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d122      	bne.n	80043fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d11b      	bne.n	80043fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0204 	mvn.w	r2, #4
 80043cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f987 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f97a 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f989 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b08      	cmp	r3, #8
 8004408:	d122      	bne.n	8004450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b08      	cmp	r3, #8
 8004416:	d11b      	bne.n	8004450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0208 	mvn.w	r2, #8
 8004420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f95d 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f950 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f95f 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b10      	cmp	r3, #16
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b10      	cmp	r3, #16
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0210 	mvn.w	r2, #16
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2208      	movs	r2, #8
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f933 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f926 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f935 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10e      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d107      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0201 	mvn.w	r2, #1
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd fa48 	bl	8001960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b80      	cmp	r3, #128	; 0x80
 80044dc:	d10e      	bne.n	80044fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d107      	bne.n	80044fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa77 	bl	80049ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d107      	bne.n	8004528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8f9 	bl	800471a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b20      	cmp	r3, #32
 8004534:	d10e      	bne.n	8004554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b20      	cmp	r3, #32
 8004542:	d107      	bne.n	8004554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0220 	mvn.w	r2, #32
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fa42 	bl	80049d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_TIM_ConfigClockSource+0x18>
 8004570:	2302      	movs	r3, #2
 8004572:	e0b3      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x180>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004592:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ac:	d03e      	beq.n	800462c <HAL_TIM_ConfigClockSource+0xd0>
 80045ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b2:	f200 8087 	bhi.w	80046c4 <HAL_TIM_ConfigClockSource+0x168>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	f000 8085 	beq.w	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c2:	d87f      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x168>
 80045c4:	2b70      	cmp	r3, #112	; 0x70
 80045c6:	d01a      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0xa2>
 80045c8:	2b70      	cmp	r3, #112	; 0x70
 80045ca:	d87b      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x168>
 80045cc:	2b60      	cmp	r3, #96	; 0x60
 80045ce:	d050      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x116>
 80045d0:	2b60      	cmp	r3, #96	; 0x60
 80045d2:	d877      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x168>
 80045d4:	2b50      	cmp	r3, #80	; 0x50
 80045d6:	d03c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0xf6>
 80045d8:	2b50      	cmp	r3, #80	; 0x50
 80045da:	d873      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x168>
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d058      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x136>
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d86f      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x168>
 80045e4:	2b30      	cmp	r3, #48	; 0x30
 80045e6:	d064      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x156>
 80045e8:	2b30      	cmp	r3, #48	; 0x30
 80045ea:	d86b      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x168>
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d060      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x156>
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d867      	bhi.n	80046c4 <HAL_TIM_ConfigClockSource+0x168>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d05c      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x156>
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d05a      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80045fc:	e062      	b.n	80046c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6899      	ldr	r1, [r3, #8]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f000 f966 	bl	80048de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004620:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	609a      	str	r2, [r3, #8]
      break;
 800462a:	e04e      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6899      	ldr	r1, [r3, #8]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f000 f94f 	bl	80048de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464e:	609a      	str	r2, [r3, #8]
      break;
 8004650:	e03b      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	461a      	mov	r2, r3
 8004660:	f000 f8c6 	bl	80047f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2150      	movs	r1, #80	; 0x50
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f91d 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004670:	e02b      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	461a      	mov	r2, r3
 8004680:	f000 f8e4 	bl	800484c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2160      	movs	r1, #96	; 0x60
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f90d 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004690:	e01b      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 f8a6 	bl	80047f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2140      	movs	r1, #64	; 0x40
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f8fd 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4619      	mov	r1, r3
 80046bc:	4610      	mov	r0, r2
 80046be:	f000 f8f4 	bl	80048aa <TIM_ITRx_SetConfig>
        break;
 80046c2:	e002      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <TIM_Base_SetConfig+0xb8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0x30>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0x30>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <TIM_Base_SetConfig+0xbc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0x30>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a25      	ldr	r2, [pc, #148]	; (80047ec <TIM_Base_SetConfig+0xc0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <TIM_Base_SetConfig+0xb8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477c:	d007      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <TIM_Base_SetConfig+0xbc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a18      	ldr	r2, [pc, #96]	; (80047ec <TIM_Base_SetConfig+0xc0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a07      	ldr	r2, [pc, #28]	; (80047e4 <TIM_Base_SetConfig+0xb8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d103      	bne.n	80047d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	615a      	str	r2, [r3, #20]
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800

080047f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 0201 	bic.w	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 030a 	bic.w	r3, r3, #10
 800482c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f023 0210 	bic.w	r2, r3, #16
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004876:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	031b      	lsls	r3, r3, #12
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004888:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	621a      	str	r2, [r3, #32]
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f043 0307 	orr.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	021a      	lsls	r2, r3, #8
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	431a      	orrs	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4313      	orrs	r3, r2
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	609a      	str	r2, [r3, #8]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr

0800491c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004930:	2302      	movs	r3, #2
 8004932:	e046      	b.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004980:	d009      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a10      	ldr	r2, [pc, #64]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10c      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800

080049d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e03f      	b.n	8004a8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd f948 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2224      	movs	r2, #36	; 0x24
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f829 	bl	8004a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ad2:	f023 030c 	bic.w	r3, r3, #12
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <UART_SetConfig+0x114>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d103      	bne.n	8004b08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe feea 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	e002      	b.n	8004b0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fe fed2 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009a      	lsls	r2, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	0119      	lsls	r1, r3, #4
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009a      	lsls	r2, r3, #2
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b46:	fba3 0302 	umull	r0, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2064      	movs	r0, #100	; 0x64
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	; 0x32
 8004b58:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b64:	4419      	add	r1, r3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009a      	lsls	r2, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2064      	movs	r0, #100	; 0x64
 8004b86:	fb00 f303 	mul.w	r3, r0, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	3332      	adds	r3, #50	; 0x32
 8004b90:	4a07      	ldr	r2, [pc, #28]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40013800 	.word	0x40013800
 8004bb0:	51eb851f 	.word	0x51eb851f

08004bb4 <__errno>:
 8004bb4:	4b01      	ldr	r3, [pc, #4]	; (8004bbc <__errno+0x8>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000014 	.word	0x20000014

08004bc0 <__libc_init_array>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	4d0c      	ldr	r5, [pc, #48]	; (8004bf8 <__libc_init_array+0x38>)
 8004bc6:	4c0d      	ldr	r4, [pc, #52]	; (8004bfc <__libc_init_array+0x3c>)
 8004bc8:	1b64      	subs	r4, r4, r5
 8004bca:	10a4      	asrs	r4, r4, #2
 8004bcc:	42a6      	cmp	r6, r4
 8004bce:	d109      	bne.n	8004be4 <__libc_init_array+0x24>
 8004bd0:	f000 fc5c 	bl	800548c <_init>
 8004bd4:	2600      	movs	r6, #0
 8004bd6:	4d0a      	ldr	r5, [pc, #40]	; (8004c00 <__libc_init_array+0x40>)
 8004bd8:	4c0a      	ldr	r4, [pc, #40]	; (8004c04 <__libc_init_array+0x44>)
 8004bda:	1b64      	subs	r4, r4, r5
 8004bdc:	10a4      	asrs	r4, r4, #2
 8004bde:	42a6      	cmp	r6, r4
 8004be0:	d105      	bne.n	8004bee <__libc_init_array+0x2e>
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be8:	4798      	blx	r3
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7ee      	b.n	8004bcc <__libc_init_array+0xc>
 8004bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf2:	4798      	blx	r3
 8004bf4:	3601      	adds	r6, #1
 8004bf6:	e7f2      	b.n	8004bde <__libc_init_array+0x1e>
 8004bf8:	08005e78 	.word	0x08005e78
 8004bfc:	08005e78 	.word	0x08005e78
 8004c00:	08005e78 	.word	0x08005e78
 8004c04:	08005e7c 	.word	0x08005e7c

08004c08 <memset>:
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4402      	add	r2, r0
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d100      	bne.n	8004c12 <memset+0xa>
 8004c10:	4770      	bx	lr
 8004c12:	f803 1b01 	strb.w	r1, [r3], #1
 8004c16:	e7f9      	b.n	8004c0c <memset+0x4>

08004c18 <siprintf>:
 8004c18:	b40e      	push	{r1, r2, r3}
 8004c1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c1e:	b500      	push	{lr}
 8004c20:	b09c      	sub	sp, #112	; 0x70
 8004c22:	ab1d      	add	r3, sp, #116	; 0x74
 8004c24:	9002      	str	r0, [sp, #8]
 8004c26:	9006      	str	r0, [sp, #24]
 8004c28:	9107      	str	r1, [sp, #28]
 8004c2a:	9104      	str	r1, [sp, #16]
 8004c2c:	4808      	ldr	r0, [pc, #32]	; (8004c50 <siprintf+0x38>)
 8004c2e:	4909      	ldr	r1, [pc, #36]	; (8004c54 <siprintf+0x3c>)
 8004c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c34:	9105      	str	r1, [sp, #20]
 8004c36:	6800      	ldr	r0, [r0, #0]
 8004c38:	a902      	add	r1, sp, #8
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	f000 f868 	bl	8004d10 <_svfiprintf_r>
 8004c40:	2200      	movs	r2, #0
 8004c42:	9b02      	ldr	r3, [sp, #8]
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	b01c      	add	sp, #112	; 0x70
 8004c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c4c:	b003      	add	sp, #12
 8004c4e:	4770      	bx	lr
 8004c50:	20000014 	.word	0x20000014
 8004c54:	ffff0208 	.word	0xffff0208

08004c58 <__ssputs_r>:
 8004c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5c:	688e      	ldr	r6, [r1, #8]
 8004c5e:	4682      	mov	sl, r0
 8004c60:	429e      	cmp	r6, r3
 8004c62:	460c      	mov	r4, r1
 8004c64:	4690      	mov	r8, r2
 8004c66:	461f      	mov	r7, r3
 8004c68:	d838      	bhi.n	8004cdc <__ssputs_r+0x84>
 8004c6a:	898a      	ldrh	r2, [r1, #12]
 8004c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c70:	d032      	beq.n	8004cd8 <__ssputs_r+0x80>
 8004c72:	6825      	ldr	r5, [r4, #0]
 8004c74:	6909      	ldr	r1, [r1, #16]
 8004c76:	3301      	adds	r3, #1
 8004c78:	eba5 0901 	sub.w	r9, r5, r1
 8004c7c:	6965      	ldr	r5, [r4, #20]
 8004c7e:	444b      	add	r3, r9
 8004c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c88:	106d      	asrs	r5, r5, #1
 8004c8a:	429d      	cmp	r5, r3
 8004c8c:	bf38      	it	cc
 8004c8e:	461d      	movcc	r5, r3
 8004c90:	0553      	lsls	r3, r2, #21
 8004c92:	d531      	bpl.n	8004cf8 <__ssputs_r+0xa0>
 8004c94:	4629      	mov	r1, r5
 8004c96:	f000 fb53 	bl	8005340 <_malloc_r>
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	b950      	cbnz	r0, 8004cb4 <__ssputs_r+0x5c>
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	f8ca 3000 	str.w	r3, [sl]
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	464a      	mov	r2, r9
 8004cb6:	6921      	ldr	r1, [r4, #16]
 8004cb8:	f000 face 	bl	8005258 <memcpy>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	6126      	str	r6, [r4, #16]
 8004cca:	444e      	add	r6, r9
 8004ccc:	6026      	str	r6, [r4, #0]
 8004cce:	463e      	mov	r6, r7
 8004cd0:	6165      	str	r5, [r4, #20]
 8004cd2:	eba5 0509 	sub.w	r5, r5, r9
 8004cd6:	60a5      	str	r5, [r4, #8]
 8004cd8:	42be      	cmp	r6, r7
 8004cda:	d900      	bls.n	8004cde <__ssputs_r+0x86>
 8004cdc:	463e      	mov	r6, r7
 8004cde:	4632      	mov	r2, r6
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	6820      	ldr	r0, [r4, #0]
 8004ce4:	f000 fac6 	bl	8005274 <memmove>
 8004ce8:	68a3      	ldr	r3, [r4, #8]
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	1b9b      	subs	r3, r3, r6
 8004cee:	4432      	add	r2, r6
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	60a3      	str	r3, [r4, #8]
 8004cf4:	6022      	str	r2, [r4, #0]
 8004cf6:	e7db      	b.n	8004cb0 <__ssputs_r+0x58>
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	f000 fb7b 	bl	80053f4 <_realloc_r>
 8004cfe:	4606      	mov	r6, r0
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d1e1      	bne.n	8004cc8 <__ssputs_r+0x70>
 8004d04:	4650      	mov	r0, sl
 8004d06:	6921      	ldr	r1, [r4, #16]
 8004d08:	f000 face 	bl	80052a8 <_free_r>
 8004d0c:	e7c7      	b.n	8004c9e <__ssputs_r+0x46>
	...

08004d10 <_svfiprintf_r>:
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	4698      	mov	r8, r3
 8004d16:	898b      	ldrh	r3, [r1, #12]
 8004d18:	4607      	mov	r7, r0
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	460d      	mov	r5, r1
 8004d1e:	4614      	mov	r4, r2
 8004d20:	b09d      	sub	sp, #116	; 0x74
 8004d22:	d50e      	bpl.n	8004d42 <_svfiprintf_r+0x32>
 8004d24:	690b      	ldr	r3, [r1, #16]
 8004d26:	b963      	cbnz	r3, 8004d42 <_svfiprintf_r+0x32>
 8004d28:	2140      	movs	r1, #64	; 0x40
 8004d2a:	f000 fb09 	bl	8005340 <_malloc_r>
 8004d2e:	6028      	str	r0, [r5, #0]
 8004d30:	6128      	str	r0, [r5, #16]
 8004d32:	b920      	cbnz	r0, 8004d3e <_svfiprintf_r+0x2e>
 8004d34:	230c      	movs	r3, #12
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3c:	e0d1      	b.n	8004ee2 <_svfiprintf_r+0x1d2>
 8004d3e:	2340      	movs	r3, #64	; 0x40
 8004d40:	616b      	str	r3, [r5, #20]
 8004d42:	2300      	movs	r3, #0
 8004d44:	9309      	str	r3, [sp, #36]	; 0x24
 8004d46:	2320      	movs	r3, #32
 8004d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d4c:	2330      	movs	r3, #48	; 0x30
 8004d4e:	f04f 0901 	mov.w	r9, #1
 8004d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004efc <_svfiprintf_r+0x1ec>
 8004d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d5e:	4623      	mov	r3, r4
 8004d60:	469a      	mov	sl, r3
 8004d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d66:	b10a      	cbz	r2, 8004d6c <_svfiprintf_r+0x5c>
 8004d68:	2a25      	cmp	r2, #37	; 0x25
 8004d6a:	d1f9      	bne.n	8004d60 <_svfiprintf_r+0x50>
 8004d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d70:	d00b      	beq.n	8004d8a <_svfiprintf_r+0x7a>
 8004d72:	465b      	mov	r3, fp
 8004d74:	4622      	mov	r2, r4
 8004d76:	4629      	mov	r1, r5
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f7ff ff6d 	bl	8004c58 <__ssputs_r>
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f000 80aa 	beq.w	8004ed8 <_svfiprintf_r+0x1c8>
 8004d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d86:	445a      	add	r2, fp
 8004d88:	9209      	str	r2, [sp, #36]	; 0x24
 8004d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 80a2 	beq.w	8004ed8 <_svfiprintf_r+0x1c8>
 8004d94:	2300      	movs	r3, #0
 8004d96:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d9e:	f10a 0a01 	add.w	sl, sl, #1
 8004da2:	9304      	str	r3, [sp, #16]
 8004da4:	9307      	str	r3, [sp, #28]
 8004da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004daa:	931a      	str	r3, [sp, #104]	; 0x68
 8004dac:	4654      	mov	r4, sl
 8004dae:	2205      	movs	r2, #5
 8004db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db4:	4851      	ldr	r0, [pc, #324]	; (8004efc <_svfiprintf_r+0x1ec>)
 8004db6:	f000 fa41 	bl	800523c <memchr>
 8004dba:	9a04      	ldr	r2, [sp, #16]
 8004dbc:	b9d8      	cbnz	r0, 8004df6 <_svfiprintf_r+0xe6>
 8004dbe:	06d0      	lsls	r0, r2, #27
 8004dc0:	bf44      	itt	mi
 8004dc2:	2320      	movmi	r3, #32
 8004dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dc8:	0711      	lsls	r1, r2, #28
 8004dca:	bf44      	itt	mi
 8004dcc:	232b      	movmi	r3, #43	; 0x2b
 8004dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd8:	d015      	beq.n	8004e06 <_svfiprintf_r+0xf6>
 8004dda:	4654      	mov	r4, sl
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f04f 0c0a 	mov.w	ip, #10
 8004de2:	9a07      	ldr	r2, [sp, #28]
 8004de4:	4621      	mov	r1, r4
 8004de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dea:	3b30      	subs	r3, #48	; 0x30
 8004dec:	2b09      	cmp	r3, #9
 8004dee:	d94e      	bls.n	8004e8e <_svfiprintf_r+0x17e>
 8004df0:	b1b0      	cbz	r0, 8004e20 <_svfiprintf_r+0x110>
 8004df2:	9207      	str	r2, [sp, #28]
 8004df4:	e014      	b.n	8004e20 <_svfiprintf_r+0x110>
 8004df6:	eba0 0308 	sub.w	r3, r0, r8
 8004dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	46a2      	mov	sl, r4
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	e7d2      	b.n	8004dac <_svfiprintf_r+0x9c>
 8004e06:	9b03      	ldr	r3, [sp, #12]
 8004e08:	1d19      	adds	r1, r3, #4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	9103      	str	r1, [sp, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bfbb      	ittet	lt
 8004e12:	425b      	neglt	r3, r3
 8004e14:	f042 0202 	orrlt.w	r2, r2, #2
 8004e18:	9307      	strge	r3, [sp, #28]
 8004e1a:	9307      	strlt	r3, [sp, #28]
 8004e1c:	bfb8      	it	lt
 8004e1e:	9204      	strlt	r2, [sp, #16]
 8004e20:	7823      	ldrb	r3, [r4, #0]
 8004e22:	2b2e      	cmp	r3, #46	; 0x2e
 8004e24:	d10c      	bne.n	8004e40 <_svfiprintf_r+0x130>
 8004e26:	7863      	ldrb	r3, [r4, #1]
 8004e28:	2b2a      	cmp	r3, #42	; 0x2a
 8004e2a:	d135      	bne.n	8004e98 <_svfiprintf_r+0x188>
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	3402      	adds	r4, #2
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	9203      	str	r2, [sp, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfb8      	it	lt
 8004e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e3e:	9305      	str	r3, [sp, #20]
 8004e40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f0c <_svfiprintf_r+0x1fc>
 8004e44:	2203      	movs	r2, #3
 8004e46:	4650      	mov	r0, sl
 8004e48:	7821      	ldrb	r1, [r4, #0]
 8004e4a:	f000 f9f7 	bl	800523c <memchr>
 8004e4e:	b140      	cbz	r0, 8004e62 <_svfiprintf_r+0x152>
 8004e50:	2340      	movs	r3, #64	; 0x40
 8004e52:	eba0 000a 	sub.w	r0, r0, sl
 8004e56:	fa03 f000 	lsl.w	r0, r3, r0
 8004e5a:	9b04      	ldr	r3, [sp, #16]
 8004e5c:	3401      	adds	r4, #1
 8004e5e:	4303      	orrs	r3, r0
 8004e60:	9304      	str	r3, [sp, #16]
 8004e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e66:	2206      	movs	r2, #6
 8004e68:	4825      	ldr	r0, [pc, #148]	; (8004f00 <_svfiprintf_r+0x1f0>)
 8004e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e6e:	f000 f9e5 	bl	800523c <memchr>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d038      	beq.n	8004ee8 <_svfiprintf_r+0x1d8>
 8004e76:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <_svfiprintf_r+0x1f4>)
 8004e78:	bb1b      	cbnz	r3, 8004ec2 <_svfiprintf_r+0x1b2>
 8004e7a:	9b03      	ldr	r3, [sp, #12]
 8004e7c:	3307      	adds	r3, #7
 8004e7e:	f023 0307 	bic.w	r3, r3, #7
 8004e82:	3308      	adds	r3, #8
 8004e84:	9303      	str	r3, [sp, #12]
 8004e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e88:	4433      	add	r3, r6
 8004e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8c:	e767      	b.n	8004d5e <_svfiprintf_r+0x4e>
 8004e8e:	460c      	mov	r4, r1
 8004e90:	2001      	movs	r0, #1
 8004e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e96:	e7a5      	b.n	8004de4 <_svfiprintf_r+0xd4>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f04f 0c0a 	mov.w	ip, #10
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	3401      	adds	r4, #1
 8004ea2:	9305      	str	r3, [sp, #20]
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eaa:	3a30      	subs	r2, #48	; 0x30
 8004eac:	2a09      	cmp	r2, #9
 8004eae:	d903      	bls.n	8004eb8 <_svfiprintf_r+0x1a8>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0c5      	beq.n	8004e40 <_svfiprintf_r+0x130>
 8004eb4:	9105      	str	r1, [sp, #20]
 8004eb6:	e7c3      	b.n	8004e40 <_svfiprintf_r+0x130>
 8004eb8:	4604      	mov	r4, r0
 8004eba:	2301      	movs	r3, #1
 8004ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ec0:	e7f0      	b.n	8004ea4 <_svfiprintf_r+0x194>
 8004ec2:	ab03      	add	r3, sp, #12
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	462a      	mov	r2, r5
 8004ec8:	4638      	mov	r0, r7
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <_svfiprintf_r+0x1f8>)
 8004ecc:	a904      	add	r1, sp, #16
 8004ece:	f3af 8000 	nop.w
 8004ed2:	1c42      	adds	r2, r0, #1
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	d1d6      	bne.n	8004e86 <_svfiprintf_r+0x176>
 8004ed8:	89ab      	ldrh	r3, [r5, #12]
 8004eda:	065b      	lsls	r3, r3, #25
 8004edc:	f53f af2c 	bmi.w	8004d38 <_svfiprintf_r+0x28>
 8004ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ee2:	b01d      	add	sp, #116	; 0x74
 8004ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee8:	ab03      	add	r3, sp, #12
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	462a      	mov	r2, r5
 8004eee:	4638      	mov	r0, r7
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <_svfiprintf_r+0x1f8>)
 8004ef2:	a904      	add	r1, sp, #16
 8004ef4:	f000 f87c 	bl	8004ff0 <_printf_i>
 8004ef8:	e7eb      	b.n	8004ed2 <_svfiprintf_r+0x1c2>
 8004efa:	bf00      	nop
 8004efc:	08005e44 	.word	0x08005e44
 8004f00:	08005e4e 	.word	0x08005e4e
 8004f04:	00000000 	.word	0x00000000
 8004f08:	08004c59 	.word	0x08004c59
 8004f0c:	08005e4a 	.word	0x08005e4a

08004f10 <_printf_common>:
 8004f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	4616      	mov	r6, r2
 8004f16:	4699      	mov	r9, r3
 8004f18:	688a      	ldr	r2, [r1, #8]
 8004f1a:	690b      	ldr	r3, [r1, #16]
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	bfb8      	it	lt
 8004f22:	4613      	movlt	r3, r2
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f30:	b10a      	cbz	r2, 8004f36 <_printf_common+0x26>
 8004f32:	3301      	adds	r3, #1
 8004f34:	6033      	str	r3, [r6, #0]
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	0699      	lsls	r1, r3, #26
 8004f3a:	bf42      	ittt	mi
 8004f3c:	6833      	ldrmi	r3, [r6, #0]
 8004f3e:	3302      	addmi	r3, #2
 8004f40:	6033      	strmi	r3, [r6, #0]
 8004f42:	6825      	ldr	r5, [r4, #0]
 8004f44:	f015 0506 	ands.w	r5, r5, #6
 8004f48:	d106      	bne.n	8004f58 <_printf_common+0x48>
 8004f4a:	f104 0a19 	add.w	sl, r4, #25
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	6832      	ldr	r2, [r6, #0]
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	42ab      	cmp	r3, r5
 8004f56:	dc28      	bgt.n	8004faa <_printf_common+0x9a>
 8004f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f5c:	1e13      	subs	r3, r2, #0
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	bf18      	it	ne
 8004f62:	2301      	movne	r3, #1
 8004f64:	0692      	lsls	r2, r2, #26
 8004f66:	d42d      	bmi.n	8004fc4 <_printf_common+0xb4>
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d020      	beq.n	8004fb8 <_printf_common+0xa8>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	68e5      	ldr	r5, [r4, #12]
 8004f7a:	f003 0306 	and.w	r3, r3, #6
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	bf18      	it	ne
 8004f82:	2500      	movne	r5, #0
 8004f84:	6832      	ldr	r2, [r6, #0]
 8004f86:	f04f 0600 	mov.w	r6, #0
 8004f8a:	68a3      	ldr	r3, [r4, #8]
 8004f8c:	bf08      	it	eq
 8004f8e:	1aad      	subeq	r5, r5, r2
 8004f90:	6922      	ldr	r2, [r4, #16]
 8004f92:	bf08      	it	eq
 8004f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	bfc4      	itt	gt
 8004f9c:	1a9b      	subgt	r3, r3, r2
 8004f9e:	18ed      	addgt	r5, r5, r3
 8004fa0:	341a      	adds	r4, #26
 8004fa2:	42b5      	cmp	r5, r6
 8004fa4:	d11a      	bne.n	8004fdc <_printf_common+0xcc>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e008      	b.n	8004fbc <_printf_common+0xac>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4652      	mov	r2, sl
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	47c0      	blx	r8
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d103      	bne.n	8004fc0 <_printf_common+0xb0>
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	3501      	adds	r5, #1
 8004fc2:	e7c4      	b.n	8004f4e <_printf_common+0x3e>
 8004fc4:	2030      	movs	r0, #48	; 0x30
 8004fc6:	18e1      	adds	r1, r4, r3
 8004fc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd2:	4422      	add	r2, r4
 8004fd4:	3302      	adds	r3, #2
 8004fd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fda:	e7c5      	b.n	8004f68 <_printf_common+0x58>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c0      	blx	r8
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d0e6      	beq.n	8004fb8 <_printf_common+0xa8>
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7d9      	b.n	8004fa2 <_printf_common+0x92>
	...

08004ff0 <_printf_i>:
 8004ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	7e27      	ldrb	r7, [r4, #24]
 8004ff8:	4691      	mov	r9, r2
 8004ffa:	2f78      	cmp	r7, #120	; 0x78
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	469a      	mov	sl, r3
 8005000:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005006:	d807      	bhi.n	8005018 <_printf_i+0x28>
 8005008:	2f62      	cmp	r7, #98	; 0x62
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x32>
 800500c:	2f00      	cmp	r7, #0
 800500e:	f000 80d9 	beq.w	80051c4 <_printf_i+0x1d4>
 8005012:	2f58      	cmp	r7, #88	; 0x58
 8005014:	f000 80a4 	beq.w	8005160 <_printf_i+0x170>
 8005018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800501c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005020:	e03a      	b.n	8005098 <_printf_i+0xa8>
 8005022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005026:	2b15      	cmp	r3, #21
 8005028:	d8f6      	bhi.n	8005018 <_printf_i+0x28>
 800502a:	a001      	add	r0, pc, #4	; (adr r0, 8005030 <_printf_i+0x40>)
 800502c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005030:	08005089 	.word	0x08005089
 8005034:	0800509d 	.word	0x0800509d
 8005038:	08005019 	.word	0x08005019
 800503c:	08005019 	.word	0x08005019
 8005040:	08005019 	.word	0x08005019
 8005044:	08005019 	.word	0x08005019
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005019 	.word	0x08005019
 8005050:	08005019 	.word	0x08005019
 8005054:	08005019 	.word	0x08005019
 8005058:	08005019 	.word	0x08005019
 800505c:	080051ab 	.word	0x080051ab
 8005060:	080050cd 	.word	0x080050cd
 8005064:	0800518d 	.word	0x0800518d
 8005068:	08005019 	.word	0x08005019
 800506c:	08005019 	.word	0x08005019
 8005070:	080051cd 	.word	0x080051cd
 8005074:	08005019 	.word	0x08005019
 8005078:	080050cd 	.word	0x080050cd
 800507c:	08005019 	.word	0x08005019
 8005080:	08005019 	.word	0x08005019
 8005084:	08005195 	.word	0x08005195
 8005088:	680b      	ldr	r3, [r1, #0]
 800508a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	600a      	str	r2, [r1, #0]
 8005094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005098:	2301      	movs	r3, #1
 800509a:	e0a4      	b.n	80051e6 <_printf_i+0x1f6>
 800509c:	6825      	ldr	r5, [r4, #0]
 800509e:	6808      	ldr	r0, [r1, #0]
 80050a0:	062e      	lsls	r6, r5, #24
 80050a2:	f100 0304 	add.w	r3, r0, #4
 80050a6:	d50a      	bpl.n	80050be <_printf_i+0xce>
 80050a8:	6805      	ldr	r5, [r0, #0]
 80050aa:	600b      	str	r3, [r1, #0]
 80050ac:	2d00      	cmp	r5, #0
 80050ae:	da03      	bge.n	80050b8 <_printf_i+0xc8>
 80050b0:	232d      	movs	r3, #45	; 0x2d
 80050b2:	426d      	negs	r5, r5
 80050b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b8:	230a      	movs	r3, #10
 80050ba:	485e      	ldr	r0, [pc, #376]	; (8005234 <_printf_i+0x244>)
 80050bc:	e019      	b.n	80050f2 <_printf_i+0x102>
 80050be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80050c2:	6805      	ldr	r5, [r0, #0]
 80050c4:	600b      	str	r3, [r1, #0]
 80050c6:	bf18      	it	ne
 80050c8:	b22d      	sxthne	r5, r5
 80050ca:	e7ef      	b.n	80050ac <_printf_i+0xbc>
 80050cc:	680b      	ldr	r3, [r1, #0]
 80050ce:	6825      	ldr	r5, [r4, #0]
 80050d0:	1d18      	adds	r0, r3, #4
 80050d2:	6008      	str	r0, [r1, #0]
 80050d4:	0628      	lsls	r0, r5, #24
 80050d6:	d501      	bpl.n	80050dc <_printf_i+0xec>
 80050d8:	681d      	ldr	r5, [r3, #0]
 80050da:	e002      	b.n	80050e2 <_printf_i+0xf2>
 80050dc:	0669      	lsls	r1, r5, #25
 80050de:	d5fb      	bpl.n	80050d8 <_printf_i+0xe8>
 80050e0:	881d      	ldrh	r5, [r3, #0]
 80050e2:	2f6f      	cmp	r7, #111	; 0x6f
 80050e4:	bf0c      	ite	eq
 80050e6:	2308      	moveq	r3, #8
 80050e8:	230a      	movne	r3, #10
 80050ea:	4852      	ldr	r0, [pc, #328]	; (8005234 <_printf_i+0x244>)
 80050ec:	2100      	movs	r1, #0
 80050ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050f2:	6866      	ldr	r6, [r4, #4]
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	bfa8      	it	ge
 80050f8:	6821      	ldrge	r1, [r4, #0]
 80050fa:	60a6      	str	r6, [r4, #8]
 80050fc:	bfa4      	itt	ge
 80050fe:	f021 0104 	bicge.w	r1, r1, #4
 8005102:	6021      	strge	r1, [r4, #0]
 8005104:	b90d      	cbnz	r5, 800510a <_printf_i+0x11a>
 8005106:	2e00      	cmp	r6, #0
 8005108:	d04d      	beq.n	80051a6 <_printf_i+0x1b6>
 800510a:	4616      	mov	r6, r2
 800510c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005110:	fb03 5711 	mls	r7, r3, r1, r5
 8005114:	5dc7      	ldrb	r7, [r0, r7]
 8005116:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800511a:	462f      	mov	r7, r5
 800511c:	42bb      	cmp	r3, r7
 800511e:	460d      	mov	r5, r1
 8005120:	d9f4      	bls.n	800510c <_printf_i+0x11c>
 8005122:	2b08      	cmp	r3, #8
 8005124:	d10b      	bne.n	800513e <_printf_i+0x14e>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	07df      	lsls	r7, r3, #31
 800512a:	d508      	bpl.n	800513e <_printf_i+0x14e>
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	6861      	ldr	r1, [r4, #4]
 8005130:	4299      	cmp	r1, r3
 8005132:	bfde      	ittt	le
 8005134:	2330      	movle	r3, #48	; 0x30
 8005136:	f806 3c01 	strble.w	r3, [r6, #-1]
 800513a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800513e:	1b92      	subs	r2, r2, r6
 8005140:	6122      	str	r2, [r4, #16]
 8005142:	464b      	mov	r3, r9
 8005144:	4621      	mov	r1, r4
 8005146:	4640      	mov	r0, r8
 8005148:	f8cd a000 	str.w	sl, [sp]
 800514c:	aa03      	add	r2, sp, #12
 800514e:	f7ff fedf 	bl	8004f10 <_printf_common>
 8005152:	3001      	adds	r0, #1
 8005154:	d14c      	bne.n	80051f0 <_printf_i+0x200>
 8005156:	f04f 30ff 	mov.w	r0, #4294967295
 800515a:	b004      	add	sp, #16
 800515c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005160:	4834      	ldr	r0, [pc, #208]	; (8005234 <_printf_i+0x244>)
 8005162:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005166:	680e      	ldr	r6, [r1, #0]
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	f856 5b04 	ldr.w	r5, [r6], #4
 800516e:	061f      	lsls	r7, r3, #24
 8005170:	600e      	str	r6, [r1, #0]
 8005172:	d514      	bpl.n	800519e <_printf_i+0x1ae>
 8005174:	07d9      	lsls	r1, r3, #31
 8005176:	bf44      	itt	mi
 8005178:	f043 0320 	orrmi.w	r3, r3, #32
 800517c:	6023      	strmi	r3, [r4, #0]
 800517e:	b91d      	cbnz	r5, 8005188 <_printf_i+0x198>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	f023 0320 	bic.w	r3, r3, #32
 8005186:	6023      	str	r3, [r4, #0]
 8005188:	2310      	movs	r3, #16
 800518a:	e7af      	b.n	80050ec <_printf_i+0xfc>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	f043 0320 	orr.w	r3, r3, #32
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	2378      	movs	r3, #120	; 0x78
 8005196:	4828      	ldr	r0, [pc, #160]	; (8005238 <_printf_i+0x248>)
 8005198:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800519c:	e7e3      	b.n	8005166 <_printf_i+0x176>
 800519e:	065e      	lsls	r6, r3, #25
 80051a0:	bf48      	it	mi
 80051a2:	b2ad      	uxthmi	r5, r5
 80051a4:	e7e6      	b.n	8005174 <_printf_i+0x184>
 80051a6:	4616      	mov	r6, r2
 80051a8:	e7bb      	b.n	8005122 <_printf_i+0x132>
 80051aa:	680b      	ldr	r3, [r1, #0]
 80051ac:	6826      	ldr	r6, [r4, #0]
 80051ae:	1d1d      	adds	r5, r3, #4
 80051b0:	6960      	ldr	r0, [r4, #20]
 80051b2:	600d      	str	r5, [r1, #0]
 80051b4:	0635      	lsls	r5, r6, #24
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	d501      	bpl.n	80051be <_printf_i+0x1ce>
 80051ba:	6018      	str	r0, [r3, #0]
 80051bc:	e002      	b.n	80051c4 <_printf_i+0x1d4>
 80051be:	0671      	lsls	r1, r6, #25
 80051c0:	d5fb      	bpl.n	80051ba <_printf_i+0x1ca>
 80051c2:	8018      	strh	r0, [r3, #0]
 80051c4:	2300      	movs	r3, #0
 80051c6:	4616      	mov	r6, r2
 80051c8:	6123      	str	r3, [r4, #16]
 80051ca:	e7ba      	b.n	8005142 <_printf_i+0x152>
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	1d1a      	adds	r2, r3, #4
 80051d0:	600a      	str	r2, [r1, #0]
 80051d2:	681e      	ldr	r6, [r3, #0]
 80051d4:	2100      	movs	r1, #0
 80051d6:	4630      	mov	r0, r6
 80051d8:	6862      	ldr	r2, [r4, #4]
 80051da:	f000 f82f 	bl	800523c <memchr>
 80051de:	b108      	cbz	r0, 80051e4 <_printf_i+0x1f4>
 80051e0:	1b80      	subs	r0, r0, r6
 80051e2:	6060      	str	r0, [r4, #4]
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	6123      	str	r3, [r4, #16]
 80051e8:	2300      	movs	r3, #0
 80051ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ee:	e7a8      	b.n	8005142 <_printf_i+0x152>
 80051f0:	4632      	mov	r2, r6
 80051f2:	4649      	mov	r1, r9
 80051f4:	4640      	mov	r0, r8
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	47d0      	blx	sl
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0ab      	beq.n	8005156 <_printf_i+0x166>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	079b      	lsls	r3, r3, #30
 8005202:	d413      	bmi.n	800522c <_printf_i+0x23c>
 8005204:	68e0      	ldr	r0, [r4, #12]
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	4298      	cmp	r0, r3
 800520a:	bfb8      	it	lt
 800520c:	4618      	movlt	r0, r3
 800520e:	e7a4      	b.n	800515a <_printf_i+0x16a>
 8005210:	2301      	movs	r3, #1
 8005212:	4632      	mov	r2, r6
 8005214:	4649      	mov	r1, r9
 8005216:	4640      	mov	r0, r8
 8005218:	47d0      	blx	sl
 800521a:	3001      	adds	r0, #1
 800521c:	d09b      	beq.n	8005156 <_printf_i+0x166>
 800521e:	3501      	adds	r5, #1
 8005220:	68e3      	ldr	r3, [r4, #12]
 8005222:	9903      	ldr	r1, [sp, #12]
 8005224:	1a5b      	subs	r3, r3, r1
 8005226:	42ab      	cmp	r3, r5
 8005228:	dcf2      	bgt.n	8005210 <_printf_i+0x220>
 800522a:	e7eb      	b.n	8005204 <_printf_i+0x214>
 800522c:	2500      	movs	r5, #0
 800522e:	f104 0619 	add.w	r6, r4, #25
 8005232:	e7f5      	b.n	8005220 <_printf_i+0x230>
 8005234:	08005e55 	.word	0x08005e55
 8005238:	08005e66 	.word	0x08005e66

0800523c <memchr>:
 800523c:	4603      	mov	r3, r0
 800523e:	b510      	push	{r4, lr}
 8005240:	b2c9      	uxtb	r1, r1
 8005242:	4402      	add	r2, r0
 8005244:	4293      	cmp	r3, r2
 8005246:	4618      	mov	r0, r3
 8005248:	d101      	bne.n	800524e <memchr+0x12>
 800524a:	2000      	movs	r0, #0
 800524c:	e003      	b.n	8005256 <memchr+0x1a>
 800524e:	7804      	ldrb	r4, [r0, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	428c      	cmp	r4, r1
 8005254:	d1f6      	bne.n	8005244 <memchr+0x8>
 8005256:	bd10      	pop	{r4, pc}

08005258 <memcpy>:
 8005258:	440a      	add	r2, r1
 800525a:	4291      	cmp	r1, r2
 800525c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005260:	d100      	bne.n	8005264 <memcpy+0xc>
 8005262:	4770      	bx	lr
 8005264:	b510      	push	{r4, lr}
 8005266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526a:	4291      	cmp	r1, r2
 800526c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005270:	d1f9      	bne.n	8005266 <memcpy+0xe>
 8005272:	bd10      	pop	{r4, pc}

08005274 <memmove>:
 8005274:	4288      	cmp	r0, r1
 8005276:	b510      	push	{r4, lr}
 8005278:	eb01 0402 	add.w	r4, r1, r2
 800527c:	d902      	bls.n	8005284 <memmove+0x10>
 800527e:	4284      	cmp	r4, r0
 8005280:	4623      	mov	r3, r4
 8005282:	d807      	bhi.n	8005294 <memmove+0x20>
 8005284:	1e43      	subs	r3, r0, #1
 8005286:	42a1      	cmp	r1, r4
 8005288:	d008      	beq.n	800529c <memmove+0x28>
 800528a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800528e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005292:	e7f8      	b.n	8005286 <memmove+0x12>
 8005294:	4601      	mov	r1, r0
 8005296:	4402      	add	r2, r0
 8005298:	428a      	cmp	r2, r1
 800529a:	d100      	bne.n	800529e <memmove+0x2a>
 800529c:	bd10      	pop	{r4, pc}
 800529e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052a6:	e7f7      	b.n	8005298 <memmove+0x24>

080052a8 <_free_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4605      	mov	r5, r0
 80052ac:	2900      	cmp	r1, #0
 80052ae:	d043      	beq.n	8005338 <_free_r+0x90>
 80052b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b4:	1f0c      	subs	r4, r1, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfb8      	it	lt
 80052ba:	18e4      	addlt	r4, r4, r3
 80052bc:	f000 f8d0 	bl	8005460 <__malloc_lock>
 80052c0:	4a1e      	ldr	r2, [pc, #120]	; (800533c <_free_r+0x94>)
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	4610      	mov	r0, r2
 80052c6:	b933      	cbnz	r3, 80052d6 <_free_r+0x2e>
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	6014      	str	r4, [r2, #0]
 80052cc:	4628      	mov	r0, r5
 80052ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d2:	f000 b8cb 	b.w	800546c <__malloc_unlock>
 80052d6:	42a3      	cmp	r3, r4
 80052d8:	d90a      	bls.n	80052f0 <_free_r+0x48>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	1862      	adds	r2, r4, r1
 80052de:	4293      	cmp	r3, r2
 80052e0:	bf01      	itttt	eq
 80052e2:	681a      	ldreq	r2, [r3, #0]
 80052e4:	685b      	ldreq	r3, [r3, #4]
 80052e6:	1852      	addeq	r2, r2, r1
 80052e8:	6022      	streq	r2, [r4, #0]
 80052ea:	6063      	str	r3, [r4, #4]
 80052ec:	6004      	str	r4, [r0, #0]
 80052ee:	e7ed      	b.n	80052cc <_free_r+0x24>
 80052f0:	461a      	mov	r2, r3
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	b10b      	cbz	r3, 80052fa <_free_r+0x52>
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	d9fa      	bls.n	80052f0 <_free_r+0x48>
 80052fa:	6811      	ldr	r1, [r2, #0]
 80052fc:	1850      	adds	r0, r2, r1
 80052fe:	42a0      	cmp	r0, r4
 8005300:	d10b      	bne.n	800531a <_free_r+0x72>
 8005302:	6820      	ldr	r0, [r4, #0]
 8005304:	4401      	add	r1, r0
 8005306:	1850      	adds	r0, r2, r1
 8005308:	4283      	cmp	r3, r0
 800530a:	6011      	str	r1, [r2, #0]
 800530c:	d1de      	bne.n	80052cc <_free_r+0x24>
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4401      	add	r1, r0
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	6053      	str	r3, [r2, #4]
 8005318:	e7d8      	b.n	80052cc <_free_r+0x24>
 800531a:	d902      	bls.n	8005322 <_free_r+0x7a>
 800531c:	230c      	movs	r3, #12
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	e7d4      	b.n	80052cc <_free_r+0x24>
 8005322:	6820      	ldr	r0, [r4, #0]
 8005324:	1821      	adds	r1, r4, r0
 8005326:	428b      	cmp	r3, r1
 8005328:	bf01      	itttt	eq
 800532a:	6819      	ldreq	r1, [r3, #0]
 800532c:	685b      	ldreq	r3, [r3, #4]
 800532e:	1809      	addeq	r1, r1, r0
 8005330:	6021      	streq	r1, [r4, #0]
 8005332:	6063      	str	r3, [r4, #4]
 8005334:	6054      	str	r4, [r2, #4]
 8005336:	e7c9      	b.n	80052cc <_free_r+0x24>
 8005338:	bd38      	pop	{r3, r4, r5, pc}
 800533a:	bf00      	nop
 800533c:	20000098 	.word	0x20000098

08005340 <_malloc_r>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	1ccd      	adds	r5, r1, #3
 8005344:	f025 0503 	bic.w	r5, r5, #3
 8005348:	3508      	adds	r5, #8
 800534a:	2d0c      	cmp	r5, #12
 800534c:	bf38      	it	cc
 800534e:	250c      	movcc	r5, #12
 8005350:	2d00      	cmp	r5, #0
 8005352:	4606      	mov	r6, r0
 8005354:	db01      	blt.n	800535a <_malloc_r+0x1a>
 8005356:	42a9      	cmp	r1, r5
 8005358:	d903      	bls.n	8005362 <_malloc_r+0x22>
 800535a:	230c      	movs	r3, #12
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	2000      	movs	r0, #0
 8005360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005362:	f000 f87d 	bl	8005460 <__malloc_lock>
 8005366:	4921      	ldr	r1, [pc, #132]	; (80053ec <_malloc_r+0xac>)
 8005368:	680a      	ldr	r2, [r1, #0]
 800536a:	4614      	mov	r4, r2
 800536c:	b99c      	cbnz	r4, 8005396 <_malloc_r+0x56>
 800536e:	4f20      	ldr	r7, [pc, #128]	; (80053f0 <_malloc_r+0xb0>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	b923      	cbnz	r3, 800537e <_malloc_r+0x3e>
 8005374:	4621      	mov	r1, r4
 8005376:	4630      	mov	r0, r6
 8005378:	f000 f862 	bl	8005440 <_sbrk_r>
 800537c:	6038      	str	r0, [r7, #0]
 800537e:	4629      	mov	r1, r5
 8005380:	4630      	mov	r0, r6
 8005382:	f000 f85d 	bl	8005440 <_sbrk_r>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	d123      	bne.n	80053d2 <_malloc_r+0x92>
 800538a:	230c      	movs	r3, #12
 800538c:	4630      	mov	r0, r6
 800538e:	6033      	str	r3, [r6, #0]
 8005390:	f000 f86c 	bl	800546c <__malloc_unlock>
 8005394:	e7e3      	b.n	800535e <_malloc_r+0x1e>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	1b5b      	subs	r3, r3, r5
 800539a:	d417      	bmi.n	80053cc <_malloc_r+0x8c>
 800539c:	2b0b      	cmp	r3, #11
 800539e:	d903      	bls.n	80053a8 <_malloc_r+0x68>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	441c      	add	r4, r3
 80053a4:	6025      	str	r5, [r4, #0]
 80053a6:	e004      	b.n	80053b2 <_malloc_r+0x72>
 80053a8:	6863      	ldr	r3, [r4, #4]
 80053aa:	42a2      	cmp	r2, r4
 80053ac:	bf0c      	ite	eq
 80053ae:	600b      	streq	r3, [r1, #0]
 80053b0:	6053      	strne	r3, [r2, #4]
 80053b2:	4630      	mov	r0, r6
 80053b4:	f000 f85a 	bl	800546c <__malloc_unlock>
 80053b8:	f104 000b 	add.w	r0, r4, #11
 80053bc:	1d23      	adds	r3, r4, #4
 80053be:	f020 0007 	bic.w	r0, r0, #7
 80053c2:	1ac2      	subs	r2, r0, r3
 80053c4:	d0cc      	beq.n	8005360 <_malloc_r+0x20>
 80053c6:	1a1b      	subs	r3, r3, r0
 80053c8:	50a3      	str	r3, [r4, r2]
 80053ca:	e7c9      	b.n	8005360 <_malloc_r+0x20>
 80053cc:	4622      	mov	r2, r4
 80053ce:	6864      	ldr	r4, [r4, #4]
 80053d0:	e7cc      	b.n	800536c <_malloc_r+0x2c>
 80053d2:	1cc4      	adds	r4, r0, #3
 80053d4:	f024 0403 	bic.w	r4, r4, #3
 80053d8:	42a0      	cmp	r0, r4
 80053da:	d0e3      	beq.n	80053a4 <_malloc_r+0x64>
 80053dc:	1a21      	subs	r1, r4, r0
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 f82e 	bl	8005440 <_sbrk_r>
 80053e4:	3001      	adds	r0, #1
 80053e6:	d1dd      	bne.n	80053a4 <_malloc_r+0x64>
 80053e8:	e7cf      	b.n	800538a <_malloc_r+0x4a>
 80053ea:	bf00      	nop
 80053ec:	20000098 	.word	0x20000098
 80053f0:	2000009c 	.word	0x2000009c

080053f4 <_realloc_r>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	4607      	mov	r7, r0
 80053f8:	4614      	mov	r4, r2
 80053fa:	460e      	mov	r6, r1
 80053fc:	b921      	cbnz	r1, 8005408 <_realloc_r+0x14>
 80053fe:	4611      	mov	r1, r2
 8005400:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005404:	f7ff bf9c 	b.w	8005340 <_malloc_r>
 8005408:	b922      	cbnz	r2, 8005414 <_realloc_r+0x20>
 800540a:	f7ff ff4d 	bl	80052a8 <_free_r>
 800540e:	4625      	mov	r5, r4
 8005410:	4628      	mov	r0, r5
 8005412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005414:	f000 f830 	bl	8005478 <_malloc_usable_size_r>
 8005418:	42a0      	cmp	r0, r4
 800541a:	d20f      	bcs.n	800543c <_realloc_r+0x48>
 800541c:	4621      	mov	r1, r4
 800541e:	4638      	mov	r0, r7
 8005420:	f7ff ff8e 	bl	8005340 <_malloc_r>
 8005424:	4605      	mov	r5, r0
 8005426:	2800      	cmp	r0, #0
 8005428:	d0f2      	beq.n	8005410 <_realloc_r+0x1c>
 800542a:	4631      	mov	r1, r6
 800542c:	4622      	mov	r2, r4
 800542e:	f7ff ff13 	bl	8005258 <memcpy>
 8005432:	4631      	mov	r1, r6
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff ff37 	bl	80052a8 <_free_r>
 800543a:	e7e9      	b.n	8005410 <_realloc_r+0x1c>
 800543c:	4635      	mov	r5, r6
 800543e:	e7e7      	b.n	8005410 <_realloc_r+0x1c>

08005440 <_sbrk_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	2300      	movs	r3, #0
 8005444:	4d05      	ldr	r5, [pc, #20]	; (800545c <_sbrk_r+0x1c>)
 8005446:	4604      	mov	r4, r0
 8005448:	4608      	mov	r0, r1
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	f7fc fcda 	bl	8001e04 <_sbrk>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_sbrk_r+0x1a>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_sbrk_r+0x1a>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	200002e0 	.word	0x200002e0

08005460 <__malloc_lock>:
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <__malloc_lock+0x8>)
 8005462:	f000 b811 	b.w	8005488 <__retarget_lock_acquire_recursive>
 8005466:	bf00      	nop
 8005468:	200002e8 	.word	0x200002e8

0800546c <__malloc_unlock>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__malloc_unlock+0x8>)
 800546e:	f000 b80c 	b.w	800548a <__retarget_lock_release_recursive>
 8005472:	bf00      	nop
 8005474:	200002e8 	.word	0x200002e8

08005478 <_malloc_usable_size_r>:
 8005478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547c:	1f18      	subs	r0, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	bfbc      	itt	lt
 8005482:	580b      	ldrlt	r3, [r1, r0]
 8005484:	18c0      	addlt	r0, r0, r3
 8005486:	4770      	bx	lr

08005488 <__retarget_lock_acquire_recursive>:
 8005488:	4770      	bx	lr

0800548a <__retarget_lock_release_recursive>:
 800548a:	4770      	bx	lr

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
